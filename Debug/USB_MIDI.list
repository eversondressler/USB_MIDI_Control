
USB_MIDI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006184  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800631c  0800631c  0000731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800637c  0800637c  00008174  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800637c  0800637c  0000737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006384  08006384  00008174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006384  08006384  00007384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006388  08006388  00007388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  0800638c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a7c  20000174  08006500  00008174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  08006500  00008bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca77  00000000  00000000  000081a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002974  00000000  00000000  00014c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00017590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000827  00000000  00000000  000180b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017de5  00000000  00000000  000188d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6ea  00000000  00000000  000306bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086efe  00000000  00000000  0003fda6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6ca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  000c6ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000c9884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000174 	.word	0x20000174
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006304 	.word	0x08006304

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000178 	.word	0x20000178
 80001d4:	08006304 	.word	0x08006304

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <MX_GPIO_Init+0x4c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a0f      	ldr	r2, [pc, #60]	@ (8000550 <MX_GPIO_Init+0x4c>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <MX_GPIO_Init+0x4c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_GPIO_Init+0x4c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <MX_GPIO_Init+0x4c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <MX_GPIO_Init+0x4c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 f92a 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f81c 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f7ff ffd0 	bl	8000504 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000564:	f005 fa1c 	bl	80059a0 <MX_USB_DEVICE_Init>
  for(;;)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		USBD_MidiMessage(0, 0x90, 0x68, 0x7F);
 8000568:	237f      	movs	r3, #127	@ 0x7f
 800056a:	2268      	movs	r2, #104	@ 0x68
 800056c:	2190      	movs	r1, #144	@ 0x90
 800056e:	2000      	movs	r0, #0
 8000570:	f005 faf0 	bl	8005b54 <USBD_MidiMessage>
		if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <main+0x40>)
 8000576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b03      	cmp	r3, #3
 800057e:	d103      	bne.n	8000588 <main+0x34>
		{
			USBD_MIDI_DataIn(&hUsbDeviceFS, MIDI_IN_EP);
 8000580:	2181      	movs	r1, #129	@ 0x81
 8000582:	4804      	ldr	r0, [pc, #16]	@ (8000594 <main+0x40>)
 8000584:	f003 fe84 	bl	8004290 <USBD_MIDI_DataIn>
		}
		HAL_Delay(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800058c:	f000 f982 	bl	8000894 <HAL_Delay>
		USBD_MidiMessage(0, 0x90, 0x68, 0x7F);
 8000590:	e7ea      	b.n	8000568 <main+0x14>
 8000592:	bf00      	nop
 8000594:	200001e8 	.word	0x200001e8

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 fe80 	bl	80062ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a26      	ldr	r2, [pc, #152]	@ (8000660 <SystemClock_Config+0xc8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <SystemClock_Config+0xcc>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000608:	2319      	movs	r3, #25
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800060c:	23c0      	movs	r3, #192	@ 0xc0
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fe45 	bl	80022ac <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f81e 	bl	8000668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2103      	movs	r1, #3
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f8a7 	bl	800279c <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000654:	f000 f808 	bl	8000668 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <Error_Handler+0x8>

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <HAL_MspInit+0x4c>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000682:	4a0f      	ldr	r2, [pc, #60]	@ (80006c0 <HAL_MspInit+0x4c>)
 8000684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000688:	6453      	str	r3, [r2, #68]	@ 0x44
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <HAL_MspInit+0x4c>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <HAL_MspInit+0x4c>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069e:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <HAL_MspInit+0x4c>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_MspInit+0x4c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <NMI_Handler+0x4>

080006cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071a:	f000 f89b 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000728:	4802      	ldr	r0, [pc, #8]	@ (8000734 <OTG_FS_IRQHandler+0x10>)
 800072a:	f000 fcb1 	bl	8001090 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200006c4 	.word	0x200006c4

08000738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	@ (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800075c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000794 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000760:	f7ff ffea 	bl	8000738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	@ (800079c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	@ (80007a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078a:	f005 fd97 	bl	80062bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800078e:	f7ff fee1 	bl	8000554 <main>
  bx  lr    
 8000792:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 80007a0:	0800638c 	.word	0x0800638c
  ldr r2, =_sbss
 80007a4:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 80007a8:	20000bf0 	.word	0x20000bf0

080007ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <HAL_Init+0x40>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <HAL_Init+0x40>)
 80007ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007c0:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <HAL_Init+0x40>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <HAL_Init+0x40>)
 80007c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_Init+0x40>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_Init+0x40>)
 80007d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f94f 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007de:	200f      	movs	r0, #15
 80007e0:	f000 f808 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff ff46 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023c00 	.word	0x40023c00

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_InitTick+0x54>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <HAL_InitTick+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800080a:	fbb3 f3f1 	udiv	r3, r3, r1
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f967 	bl	8000ae6 <HAL_SYSTICK_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e00e      	b.n	8000840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d80a      	bhi.n	800083e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 f92f 	bl	8000a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4a06      	ldr	r2, [pc, #24]	@ (8000850 <HAL_InitTick+0x5c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000000 	.word	0x20000000
 800084c:	20000008 	.word	0x20000008
 8000850:	20000004 	.word	0x20000004

08000854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_IncTick+0x20>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_IncTick+0x24>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <HAL_IncTick+0x24>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008
 8000878:	20000190 	.word	0x20000190

0800087c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <HAL_GetTick+0x14>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000190 	.word	0x20000190

08000894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800089c:	f7ff ffee 	bl	800087c <HAL_GetTick>
 80008a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ac:	d005      	beq.n	80008ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <HAL_Delay+0x44>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4413      	add	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ba:	bf00      	nop
 80008bc:	f7ff ffde 	bl	800087c <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d8f7      	bhi.n	80008bc <HAL_Delay+0x28>
  {
  }
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000008 	.word	0x20000008

080008dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	2b00      	cmp	r3, #0
 8000950:	db0b      	blt.n	800096a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f003 021f 	and.w	r2, r3, #31
 8000958:	4907      	ldr	r1, [pc, #28]	@ (8000978 <__NVIC_EnableIRQ+0x38>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	095b      	lsrs	r3, r3, #5
 8000960:	2001      	movs	r0, #1
 8000962:	fa00 f202 	lsl.w	r2, r0, r2
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db0a      	blt.n	80009a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	490c      	ldr	r1, [pc, #48]	@ (80009c8 <__NVIC_SetPriority+0x4c>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	0112      	lsls	r2, r2, #4
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	440b      	add	r3, r1
 80009a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a4:	e00a      	b.n	80009bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4908      	ldr	r1, [pc, #32]	@ (80009cc <__NVIC_SetPriority+0x50>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3b04      	subs	r3, #4
 80009b4:	0112      	lsls	r2, r2, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	761a      	strb	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	@ 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f1c3 0307 	rsb	r3, r3, #7
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	bf28      	it	cs
 80009ee:	2304      	movcs	r3, #4
 80009f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3304      	adds	r3, #4
 80009f6:	2b06      	cmp	r3, #6
 80009f8:	d902      	bls.n	8000a00 <NVIC_EncodePriority+0x30>
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3b03      	subs	r3, #3
 80009fe:	e000      	b.n	8000a02 <NVIC_EncodePriority+0x32>
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 32ff 	mov.w	r2, #4294967295
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	401a      	ands	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43d9      	mvns	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	4313      	orrs	r3, r2
         );
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3724      	adds	r7, #36	@ 0x24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a48:	d301      	bcc.n	8000a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00f      	b.n	8000a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <SysTick_Config+0x40>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a56:	210f      	movs	r1, #15
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f7ff ff8e 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <SysTick_Config+0x40>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <SysTick_Config+0x40>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff29 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa4:	f7ff ff3e 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f7ff ff8e 	bl	80009d0 <NVIC_EncodePriority>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff5d 	bl	800097c <__NVIC_SetPriority>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff31 	bl	8000940 <__NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ffa2 	bl	8000a38 <SysTick_Config>
 8000af4:	4603      	mov	r3, r0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	@ 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	e159      	b.n	8000dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f040 8148 	bne.w	8000dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d005      	beq.n	8000b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d130      	bne.n	8000bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4013      	ands	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	f003 0201 	and.w	r2, r3, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d017      	beq.n	8000bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d123      	bne.n	8000c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	08da      	lsrs	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3208      	adds	r2, #8
 8000c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	69b9      	ldr	r1, [r7, #24]
 8000c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0203 	and.w	r2, r3, #3
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 80a2 	beq.w	8000dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b57      	ldr	r3, [pc, #348]	@ (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a56      	ldr	r2, [pc, #344]	@ (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b54      	ldr	r3, [pc, #336]	@ (8000de8 <HAL_GPIO_Init+0x2e8>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca2:	4a52      	ldr	r2, [pc, #328]	@ (8000dec <HAL_GPIO_Init+0x2ec>)
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a49      	ldr	r2, [pc, #292]	@ (8000df0 <HAL_GPIO_Init+0x2f0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d019      	beq.n	8000d02 <HAL_GPIO_Init+0x202>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a48      	ldr	r2, [pc, #288]	@ (8000df4 <HAL_GPIO_Init+0x2f4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0x1fe>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a47      	ldr	r2, [pc, #284]	@ (8000df8 <HAL_GPIO_Init+0x2f8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d00d      	beq.n	8000cfa <HAL_GPIO_Init+0x1fa>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a46      	ldr	r2, [pc, #280]	@ (8000dfc <HAL_GPIO_Init+0x2fc>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d007      	beq.n	8000cf6 <HAL_GPIO_Init+0x1f6>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a45      	ldr	r2, [pc, #276]	@ (8000e00 <HAL_GPIO_Init+0x300>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_GPIO_Init+0x1f2>
 8000cee:	2304      	movs	r3, #4
 8000cf0:	e008      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e004      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <HAL_GPIO_Init+0x204>
 8000d02:	2300      	movs	r3, #0
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	f002 0203 	and.w	r2, r2, #3
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d14:	4935      	ldr	r1, [pc, #212]	@ (8000dec <HAL_GPIO_Init+0x2ec>)
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d22:	4b38      	ldr	r3, [pc, #224]	@ (8000e04 <HAL_GPIO_Init+0x304>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d46:	4a2f      	ldr	r2, [pc, #188]	@ (8000e04 <HAL_GPIO_Init+0x304>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <HAL_GPIO_Init+0x304>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d70:	4a24      	ldr	r2, [pc, #144]	@ (8000e04 <HAL_GPIO_Init+0x304>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d76:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <HAL_GPIO_Init+0x304>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e04 <HAL_GPIO_Init+0x304>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da0:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <HAL_GPIO_Init+0x304>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000e04 <HAL_GPIO_Init+0x304>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	f67f aea2 	bls.w	8000b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40013800 	.word	0x40013800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020c00 	.word	0x40020c00
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40013c00 	.word	0x40013c00

08000e08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af02      	add	r7, sp, #8
 8000e0e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e101      	b.n	800101e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d106      	bne.n	8000e3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f004 ff2f 	bl	8005c98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e48:	d102      	bne.n	8000e50 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 ff70 	bl	8002d3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6818      	ldr	r0, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7c1a      	ldrb	r2, [r3, #16]
 8000e62:	f88d 2000 	strb.w	r2, [sp]
 8000e66:	3304      	adds	r3, #4
 8000e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e6a:	f001 fe4f 	bl	8002b0c <USB_CoreInit>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2202      	movs	r2, #2
 8000e78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e0ce      	b.n	800101e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 ff68 	bl	8002d5c <USB_SetCurrentMode>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2202      	movs	r2, #2
 8000e96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e0bf      	b.n	800101e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	e04a      	b.n	8000f3a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ea4:	7bfa      	ldrb	r2, [r7, #15]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	4413      	add	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3315      	adds	r3, #21
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	3314      	adds	r3, #20
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	b298      	uxth	r0, r3
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4413      	add	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	440b      	add	r3, r1
 8000ede:	332e      	adds	r3, #46	@ 0x2e
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4413      	add	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	331c      	adds	r3, #28
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	3320      	adds	r3, #32
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4413      	add	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3324      	adds	r3, #36	@ 0x24
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	791b      	ldrb	r3, [r3, #4]
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d3af      	bcc.n	8000ea4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e044      	b.n	8000fd4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d3b5      	bcc.n	8000f4a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7c1a      	ldrb	r2, [r3, #16]
 8000fe6:	f88d 2000 	strb.w	r2, [sp]
 8000fea:	3304      	adds	r3, #4
 8000fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fee:	f001 ff01 	bl	8002df4 <USB_DevInit>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e00c      	b.n	800101e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f002 ff4b 	bl	8003eb2 <USB_DevDisconnect>

  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <HAL_PCD_Start+0x1c>
 800103e:	2302      	movs	r3, #2
 8001040:	e022      	b.n	8001088 <HAL_PCD_Start+0x62>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001052:	2b00      	cmp	r3, #0
 8001054:	d009      	beq.n	800106a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800105a:	2b01      	cmp	r3, #1
 800105c:	d105      	bne.n	800106a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001062:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fe52 	bl	8002d18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f002 fef9 	bl	8003e70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b08d      	sub	sp, #52	@ 0x34
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 ffb7 	bl	800401a <USB_GetMode>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 848c 	bne.w	80019cc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 ff1b 	bl	8003ef4 <USB_ReadInterrupts>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 8482 	beq.w	80019ca <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 ff08 	bl	8003ef4 <USB_ReadInterrupts>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d107      	bne.n	80010fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	695a      	ldr	r2, [r3, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f002 0202 	and.w	r2, r2, #2
 80010fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fef6 	bl	8003ef4 <USB_ReadInterrupts>
 8001108:	4603      	mov	r3, r0
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b10      	cmp	r3, #16
 8001110:	d161      	bne.n	80011d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	699a      	ldr	r2, [r3, #24]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0210 	bic.w	r2, r2, #16
 8001120:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f003 020f 	and.w	r2, r3, #15
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	3304      	adds	r3, #4
 8001140:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001148:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800114c:	d124      	bne.n	8001198 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d035      	beq.n	80011c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001168:	b29b      	uxth	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	6a38      	ldr	r0, [r7, #32]
 800116e:	f002 fd2d 	bl	8003bcc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800117e:	441a      	add	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001190:	441a      	add	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	615a      	str	r2, [r3, #20]
 8001196:	e016      	b.n	80011c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800119e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80011a2:	d110      	bne.n	80011c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80011aa:	2208      	movs	r2, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	6a38      	ldr	r0, [r7, #32]
 80011b0:	f002 fd0c 	bl	8003bcc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	695a      	ldr	r2, [r3, #20]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c0:	441a      	add	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699a      	ldr	r2, [r3, #24]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f042 0210 	orr.w	r2, r2, #16
 80011d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fe8a 	bl	8003ef4 <USB_ReadInterrupts>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80011ea:	f040 80a7 	bne.w	800133c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fe8f 	bl	8003f1a <USB_ReadDevAllOutEpInterrupt>
 80011fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80011fe:	e099      	b.n	8001334 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 808e 	beq.w	8001328 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f002 feb3 	bl	8003f82 <USB_ReadDevOutEPInterrupt>
 800121c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	015a      	lsls	r2, r3, #5
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	4413      	add	r3, r2
 8001230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001234:	461a      	mov	r2, r3
 8001236:	2301      	movs	r3, #1
 8001238:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800123a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fea3 	bl	8001f88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00c      	beq.n	8001266 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	015a      	lsls	r2, r3, #5
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	4413      	add	r3, r2
 8001254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001258:	461a      	mov	r2, r3
 800125a:	2308      	movs	r3, #8
 800125c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800125e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 ff79 	bl	8002158 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	015a      	lsls	r2, r3, #5
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800127c:	461a      	mov	r2, r3
 800127e:	2310      	movs	r3, #16
 8001280:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d030      	beq.n	80012ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001294:	2b80      	cmp	r3, #128	@ 0x80
 8001296:	d109      	bne.n	80012ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80012a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ae:	4613      	mov	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	3304      	adds	r3, #4
 80012c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	78db      	ldrb	r3, [r3, #3]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2200      	movs	r2, #0
 80012ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4619      	mov	r1, r3
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f004 fdda 	bl	8005e90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012e8:	461a      	mov	r2, r3
 80012ea:	2302      	movs	r3, #2
 80012ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	015a      	lsls	r2, r3, #5
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	4413      	add	r3, r2
 8001300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001304:	461a      	mov	r2, r3
 8001306:	2320      	movs	r3, #32
 8001308:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d009      	beq.n	8001328 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	015a      	lsls	r2, r3, #5
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	4413      	add	r3, r2
 800131c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001320:	461a      	mov	r2, r3
 8001322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001326:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	3301      	adds	r3, #1
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800132e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001330:	085b      	lsrs	r3, r3, #1
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f af62 	bne.w	8001200 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fdd7 	bl	8003ef4 <USB_ReadInterrupts>
 8001346:	4603      	mov	r3, r0
 8001348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800134c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001350:	f040 80db 	bne.w	800150a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fdf8 	bl	8003f4e <USB_ReadDevAllInEpInterrupt>
 800135e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001364:	e0cd      	b.n	8001502 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80c2 	beq.w	80014f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fe1e 	bl	8003fbe <USB_ReadDevInEPInterrupt>
 8001382:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d057      	beq.n	800143e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	2201      	movs	r2, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69f9      	ldr	r1, [r7, #28]
 80013aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80013ae:	4013      	ands	r3, r2
 80013b0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	015a      	lsls	r2, r3, #5
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013be:	461a      	mov	r2, r3
 80013c0:	2301      	movs	r3, #1
 80013c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	799b      	ldrb	r3, [r3, #6]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d132      	bne.n	8001432 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	3320      	adds	r3, #32
 80013dc:	6819      	ldr	r1, [r3, #0]
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4403      	add	r3, r0
 80013ec:	331c      	adds	r3, #28
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4419      	add	r1, r3
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f6:	4613      	mov	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4403      	add	r3, r0
 8001400:	3320      	adds	r3, #32
 8001402:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	2b00      	cmp	r3, #0
 8001408:	d113      	bne.n	8001432 <HAL_PCD_IRQHandler+0x3a2>
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	3324      	adds	r3, #36	@ 0x24
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d108      	bne.n	8001432 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800142a:	461a      	mov	r2, r3
 800142c:	2101      	movs	r1, #1
 800142e:	f002 fe25 	bl	800407c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f004 fcae 	bl	8005d9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	4413      	add	r3, r2
 8001450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001454:	461a      	mov	r2, r3
 8001456:	2308      	movs	r3, #8
 8001458:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	015a      	lsls	r2, r3, #5
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	4413      	add	r3, r2
 800146c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001470:	461a      	mov	r2, r3
 8001472:	2310      	movs	r3, #16
 8001474:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	015a      	lsls	r2, r3, #5
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	4413      	add	r3, r2
 8001488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800148c:	461a      	mov	r2, r3
 800148e:	2340      	movs	r3, #64	@ 0x40
 8001490:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d023      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800149c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800149e:	6a38      	ldr	r0, [r7, #32]
 80014a0:	f001 fe0c 	bl	80030bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	3310      	adds	r3, #16
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	3304      	adds	r3, #4
 80014b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	78db      	ldrb	r3, [r3, #3]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d108      	bne.n	80014d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2200      	movs	r2, #0
 80014c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f004 fcf1 	bl	8005eb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014de:	461a      	mov	r2, r3
 80014e0:	2302      	movs	r3, #2
 80014e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fcbd 	bl	8001e70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	3301      	adds	r3, #1
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80014fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fe:	085b      	lsrs	r3, r3, #1
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	f47f af2e 	bne.w	8001366 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fcf0 	bl	8003ef4 <USB_ReadInterrupts>
 8001514:	4603      	mov	r3, r0
 8001516:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800151a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800151e:	d122      	bne.n	8001566 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800153a:	2b01      	cmp	r3, #1
 800153c:	d108      	bne.n	8001550 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001546:	2100      	movs	r1, #0
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fea3 	bl	8002294 <HAL_PCDEx_LPM_Callback>
 800154e:	e002      	b.n	8001556 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f004 fc8f 	bl	8005e74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fcc2 	bl	8003ef4 <USB_ReadInterrupts>
 8001570:	4603      	mov	r3, r0
 8001572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800157a:	d112      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b01      	cmp	r3, #1
 800158a:	d102      	bne.n	8001592 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f004 fc4b 	bl	8005e28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80015a0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fca4 	bl	8003ef4 <USB_ReadInterrupts>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015b6:	f040 80b7 	bne.w	8001728 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2110      	movs	r1, #16
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fd71 	bl	80030bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015de:	e046      	b.n	800166e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ec:	461a      	mov	r2, r3
 80015ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80015f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f6:	015a      	lsls	r2, r3, #5
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001604:	0151      	lsls	r1, r2, #5
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	440a      	add	r2, r1
 800160a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800160e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001612:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001620:	461a      	mov	r2, r3
 8001622:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001626:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001638:	0151      	lsls	r1, r2, #5
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	440a      	add	r2, r1
 800163e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001642:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001646:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164a:	015a      	lsls	r2, r3, #5
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4413      	add	r3, r2
 8001650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001658:	0151      	lsls	r1, r2, #5
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	440a      	add	r2, r1
 800165e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001662:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001666:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166a:	3301      	adds	r3, #1
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	791b      	ldrb	r3, [r3, #4]
 8001672:	461a      	mov	r2, r3
 8001674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001676:	4293      	cmp	r3, r2
 8001678:	d3b2      	bcc.n	80015e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001688:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800168c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7bdb      	ldrb	r3, [r3, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d016      	beq.n	80016c4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800169c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016a6:	f043 030b 	orr.w	r3, r3, #11
 80016aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016bc:	f043 030b 	orr.w	r3, r3, #11
 80016c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c2:	e015      	b.n	80016f0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016d6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80016da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016ea:	f043 030b 	orr.w	r3, r3, #11
 80016ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001702:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001712:	461a      	mov	r2, r3
 8001714:	f002 fcb2 	bl	800407c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001726:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f002 fbe1 	bl	8003ef4 <USB_ReadInterrupts>
 8001732:	4603      	mov	r3, r0
 8001734:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800173c:	d123      	bne.n	8001786 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fc77 	bl	8004036 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fd2e 	bl	80031ae <USB_GetDevSpeed>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681c      	ldr	r4, [r3, #0]
 800175e:	f001 f9c9 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8001762:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001768:	461a      	mov	r2, r3
 800176a:	4620      	mov	r0, r4
 800176c:	f001 fa32 	bl	8002bd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f004 fb3a 	bl	8005dea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001784:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fbb2 	bl	8003ef4 <USB_ReadInterrupts>
 8001790:	4603      	mov	r3, r0
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b08      	cmp	r3, #8
 8001798:	d10a      	bne.n	80017b0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f004 fb17 	bl	8005dce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f002 0208 	and.w	r2, r2, #8
 80017ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 fb9d 	bl	8003ef4 <USB_ReadInterrupts>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c0:	2b80      	cmp	r3, #128	@ 0x80
 80017c2:	d123      	bne.n	800180c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017d0:	2301      	movs	r3, #1
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d4:	e014      	b.n	8001800 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d105      	bne.n	80017fa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fb0a 	bl	8001e0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	3301      	adds	r3, #1
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	461a      	mov	r2, r3
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	4293      	cmp	r3, r2
 800180a:	d3e4      	bcc.n	80017d6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fb6f 	bl	8003ef4 <USB_ReadInterrupts>
 8001816:	4603      	mov	r3, r0
 8001818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800181c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001820:	d13c      	bne.n	800189c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001822:	2301      	movs	r3, #1
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
 8001826:	e02b      	b.n	8001880 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	015a      	lsls	r2, r3, #5
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	4413      	add	r3, r2
 8001830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	3318      	adds	r3, #24
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d115      	bne.n	800187a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800184e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001850:	2b00      	cmp	r3, #0
 8001852:	da12      	bge.n	800187a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	3317      	adds	r3, #23
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 faca 	bl	8001e0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	791b      	ldrb	r3, [r3, #4]
 8001884:	461a      	mov	r2, r3
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	4293      	cmp	r3, r2
 800188a:	d3cd      	bcc.n	8001828 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800189a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 fb27 	bl	8003ef4 <USB_ReadInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018b0:	d156      	bne.n	8001960 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018b2:	2301      	movs	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b6:	e045      	b.n	8001944 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	015a      	lsls	r2, r3, #5
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	4413      	add	r3, r2
 80018c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d12e      	bne.n	800193e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	da2b      	bge.n	800193e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80018f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d121      	bne.n	800193e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10a      	bne.n	800193e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800193a:	6053      	str	r3, [r2, #4]
            break;
 800193c:	e008      	b.n	8001950 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	3301      	adds	r3, #1
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	791b      	ldrb	r3, [r3, #4]
 8001948:	461a      	mov	r2, r3
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	4293      	cmp	r3, r2
 800194e:	d3b3      	bcc.n	80018b8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800195e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f002 fac5 	bl	8003ef4 <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001974:	d10a      	bne.n	800198c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f004 faae 	bl	8005ed8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800198a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f002 faaf 	bl	8003ef4 <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b04      	cmp	r3, #4
 800199e:	d115      	bne.n	80019cc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f004 fa9e 	bl	8005ef4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6859      	ldr	r1, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	e000      	b.n	80019cc <HAL_PCD_IRQHandler+0x93c>
      return;
 80019ca:	bf00      	nop
    }
  }
}
 80019cc:	3734      	adds	r7, #52	@ 0x34
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}

080019d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_PCD_SetAddress+0x1a>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e012      	b.n	8001a12 <HAL_PCD_SetAddress+0x40>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fa0e 	bl	8003e24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	4608      	mov	r0, r1
 8001a24:	4611      	mov	r1, r2
 8001a26:	461a      	mov	r2, r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	70fb      	strb	r3, [r7, #3]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	803b      	strh	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da0f      	bge.n	8001a60 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	f003 020f 	and.w	r2, r3, #15
 8001a46:	4613      	mov	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	3310      	adds	r3, #16
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	3304      	adds	r3, #4
 8001a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	705a      	strb	r2, [r3, #1]
 8001a5e:	e00f      	b.n	8001a80 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 020f 	and.w	r2, r3, #15
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	3304      	adds	r3, #4
 8001a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001a8c:	883b      	ldrh	r3, [r7, #0]
 8001a8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	78ba      	ldrb	r2, [r7, #2]
 8001a9a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aae:	78bb      	ldrb	r3, [r7, #2]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d102      	bne.n	8001aba <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_PCD_EP_Open+0xae>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e00e      	b.n	8001ae6 <HAL_PCD_EP_Open+0xcc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 fb8e 	bl	80031f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da0f      	bge.n	8001b22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	f003 020f 	and.w	r2, r3, #15
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	3310      	adds	r3, #16
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
 8001b20:	e00f      	b.n	8001b42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 020f 	and.w	r2, r3, #15
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	3304      	adds	r3, #4
 8001b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_PCD_EP_Close+0x6e>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e00e      	b.n	8001b7a <HAL_PCD_EP_Close+0x8c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f001 fbcc 	bl	8003308 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3304      	adds	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	799b      	ldrb	r3, [r3, #6]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d102      	bne.n	8001bde <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	799b      	ldrb	r3, [r3, #6]
 8001be6:	461a      	mov	r2, r3
 8001be8:	6979      	ldr	r1, [r7, #20]
 8001bea:	f001 fc69 	bl	80034c0 <USB_EPStartXfer>

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 020f 	and.w	r2, r3, #15
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	460b      	mov	r3, r1
 8001c36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	f003 020f 	and.w	r2, r3, #15
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	3310      	adds	r3, #16
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2201      	movs	r2, #1
 8001c66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c68:	7afb      	ldrb	r3, [r7, #11]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	799b      	ldrb	r3, [r3, #6]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	799b      	ldrb	r3, [r3, #6]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	f001 fc17 	bl	80034c0 <USB_EPStartXfer>

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	7912      	ldrb	r2, [r2, #4]
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e04f      	b.n	8001d5a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da0f      	bge.n	8001ce2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	f003 020f 	and.w	r2, r3, #15
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	3310      	adds	r3, #16
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	705a      	strb	r2, [r3, #1]
 8001ce0:	e00d      	b.n	8001cfe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2201      	movs	r2, #1
 8001d02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_PCD_EP_SetStall+0x82>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e01d      	b.n	8001d5a <HAL_PCD_EP_SetStall+0xbe>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 ffa5 	bl	8003c7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7999      	ldrb	r1, [r3, #6]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f002 f996 	bl	800407c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	7912      	ldrb	r2, [r2, #4]
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e042      	b.n	8001e06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da0f      	bge.n	8001da8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	f003 020f 	and.w	r2, r3, #15
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	3310      	adds	r3, #16
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	705a      	strb	r2, [r3, #1]
 8001da6:	e00f      	b.n	8001dc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 020f 	and.w	r2, r3, #15
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_EP_ClrStall+0x86>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e00e      	b.n	8001e06 <HAL_PCD_EP_ClrStall+0xa4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68f9      	ldr	r1, [r7, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 ffae 	bl	8003d58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da0c      	bge.n	8001e3c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	3310      	adds	r3, #16
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	3304      	adds	r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e00c      	b.n	8001e56 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 020f 	and.w	r2, r3, #15
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	3304      	adds	r3, #4
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68f9      	ldr	r1, [r7, #12]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 fdcd 	bl	80039fc <USB_EPStopXfer>
 8001e62:	4603      	mov	r3, r0
 8001e64:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e66:	7afb      	ldrb	r3, [r7, #11]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	3310      	adds	r3, #16
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d901      	bls.n	8001ea8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e06b      	b.n	8001f80 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d902      	bls.n	8001ec4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	3303      	adds	r3, #3
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ecc:	e02a      	b.n	8001f24 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d902      	bls.n	8001eea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3303      	adds	r3, #3
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	68d9      	ldr	r1, [r3, #12]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	4603      	mov	r3, r0
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f001 fe22 	bl	8003b50 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	441a      	add	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	441a      	add	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d809      	bhi.n	8001f4e <PCD_WriteEmptyTxFifo+0xde>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d203      	bcs.n	8001f4e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1bf      	bne.n	8001ece <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d811      	bhi.n	8001f7e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	2201      	movs	r2, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	6939      	ldr	r1, [r7, #16]
 8001f76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	333c      	adds	r3, #60	@ 0x3c
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	799b      	ldrb	r3, [r3, #6]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d17b      	bne.n	80020b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d015      	beq.n	8001ff4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	4a61      	ldr	r2, [pc, #388]	@ (8002150 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	f240 80b9 	bls.w	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80b3 	beq.w	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fea:	461a      	mov	r2, r3
 8001fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ff0:	6093      	str	r3, [r2, #8]
 8001ff2:	e0a7      	b.n	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800200a:	461a      	mov	r2, r3
 800200c:	2320      	movs	r3, #32
 800200e:	6093      	str	r3, [r2, #8]
 8002010:	e098      	b.n	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	f040 8093 	bne.w	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	4a4b      	ldr	r2, [pc, #300]	@ (8002150 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d90f      	bls.n	8002046 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	4413      	add	r3, r2
 8002038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800203c:	461a      	mov	r2, r3
 800203e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002042:	6093      	str	r3, [r2, #8]
 8002044:	e07e      	b.n	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	3304      	adds	r3, #4
 800205a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a1a      	ldr	r2, [r3, #32]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	0159      	lsls	r1, r3, #5
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	440b      	add	r3, r1
 8002068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002072:	1ad2      	subs	r2, r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d114      	bne.n	80020a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002090:	461a      	mov	r2, r3
 8002092:	2101      	movs	r1, #1
 8002094:	f001 fff2 	bl	800407c <USB_EP0_OutStart>
 8002098:	e006      	b.n	80020a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	441a      	add	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	4619      	mov	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f003 fe58 	bl	8005d64 <HAL_PCD_DataOutStageCallback>
 80020b4:	e046      	b.n	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	4a26      	ldr	r2, [pc, #152]	@ (8002154 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d124      	bne.n	8002108 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020d4:	461a      	mov	r2, r3
 80020d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	e032      	b.n	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020f4:	461a      	mov	r2, r3
 80020f6:	2320      	movs	r3, #32
 80020f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f003 fe2f 	bl	8005d64 <HAL_PCD_DataOutStageCallback>
 8002106:	e01d      	b.n	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d114      	bne.n	8002138 <PCD_EP_OutXfrComplete_int+0x1b0>
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002130:	461a      	mov	r2, r3
 8002132:	2100      	movs	r1, #0
 8002134:	f001 ffa2 	bl	800407c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4619      	mov	r1, r3
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f003 fe10 	bl	8005d64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	4f54300a 	.word	0x4f54300a
 8002154:	4f54310a 	.word	0x4f54310a

08002158 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	333c      	adds	r3, #60	@ 0x3c
 8002170:	3304      	adds	r3, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d90e      	bls.n	80021ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a4:	461a      	mov	r2, r3
 80021a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f003 fdc7 	bl	8005d40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d90c      	bls.n	80021d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	799b      	ldrb	r3, [r3, #6]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d108      	bne.n	80021d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021cc:	461a      	mov	r2, r3
 80021ce:	2101      	movs	r1, #1
 80021d0:	f001 ff54 	bl	800407c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	4f54300a 	.word	0x4f54300a

080021e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
 80021f0:	4613      	mov	r3, r2
 80021f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d107      	bne.n	8002212 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002202:	883b      	ldrh	r3, [r7, #0]
 8002204:	0419      	lsls	r1, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	430a      	orrs	r2, r1
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002210:	e028      	b.n	8002264 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4413      	add	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e00d      	b.n	8002242 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	3340      	adds	r3, #64	@ 0x40
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4413      	add	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	3301      	adds	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	3b01      	subs	r3, #1
 8002248:	429a      	cmp	r2, r3
 800224a:	d3ec      	bcc.n	8002226 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800224c:	883b      	ldrh	r3, [r7, #0]
 800224e:	0418      	lsls	r0, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	3b01      	subs	r3, #1
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	4302      	orrs	r2, r0
 800225c:	3340      	adds	r3, #64	@ 0x40
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e267      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d075      	beq.n	80023b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022ca:	4b88      	ldr	r3, [pc, #544]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d00c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d6:	4b85      	ldr	r3, [pc, #532]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d112      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e2:	4b82      	ldr	r3, [pc, #520]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ee:	d10b      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	4b7e      	ldr	r3, [pc, #504]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d05b      	beq.n	80023b4 <HAL_RCC_OscConfig+0x108>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d157      	bne.n	80023b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e242      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x74>
 8002312:	4b76      	ldr	r3, [pc, #472]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a75      	ldr	r2, [pc, #468]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x98>
 800232a:	4b70      	ldr	r3, [pc, #448]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6f      	ldr	r2, [pc, #444]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b6d      	ldr	r3, [pc, #436]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6c      	ldr	r2, [pc, #432]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002344:	4b69      	ldr	r3, [pc, #420]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a68      	ldr	r2, [pc, #416]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b66      	ldr	r3, [pc, #408]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a65      	ldr	r2, [pc, #404]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800235a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fa8a 	bl	800087c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe fa86 	bl	800087c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	@ 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e207      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b5b      	ldr	r3, [pc, #364]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xc0>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fa76 	bl	800087c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fa72 	bl	800087c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1f3      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	4b51      	ldr	r3, [pc, #324]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0xe8>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d063      	beq.n	800248a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023c2:	4b4a      	ldr	r3, [pc, #296]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ce:	4b47      	ldr	r3, [pc, #284]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d11c      	bne.n	8002414 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023da:	4b44      	ldr	r3, [pc, #272]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	4b41      	ldr	r3, [pc, #260]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x152>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1c7      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b3b      	ldr	r3, [pc, #236]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4937      	ldr	r1, [pc, #220]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	e03a      	b.n	800248a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b34      	ldr	r3, [pc, #208]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe fa2b 	bl	800087c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242a:	f7fe fa27 	bl	800087c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e1a8      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b28      	ldr	r3, [pc, #160]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4925      	ldr	r1, [pc, #148]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fa0a 	bl	800087c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fa06 	bl	800087c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e187      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d036      	beq.n	8002504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_RCC_OscConfig+0x248>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe f9ea 	bl	800087c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7fe f9e6 	bl	800087c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e167      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_RCC_OscConfig+0x240>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x200>
 80024ca:	e01b      	b.n	8002504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <HAL_RCC_OscConfig+0x248>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7fe f9d3 	bl	800087c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	e00e      	b.n	80024f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024da:	f7fe f9cf 	bl	800087c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d907      	bls.n	80024f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e150      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
 80024ec:	40023800 	.word	0x40023800
 80024f0:	42470000 	.word	0x42470000
 80024f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	4b88      	ldr	r3, [pc, #544]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ea      	bne.n	80024da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8097 	beq.w	8002640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002516:	4b81      	ldr	r3, [pc, #516]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	4b7d      	ldr	r3, [pc, #500]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	4a7c      	ldr	r2, [pc, #496]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002530:	6413      	str	r3, [r2, #64]	@ 0x40
 8002532:	4b7a      	ldr	r3, [pc, #488]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002542:	4b77      	ldr	r3, [pc, #476]	@ (8002720 <HAL_RCC_OscConfig+0x474>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254e:	4b74      	ldr	r3, [pc, #464]	@ (8002720 <HAL_RCC_OscConfig+0x474>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a73      	ldr	r2, [pc, #460]	@ (8002720 <HAL_RCC_OscConfig+0x474>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7fe f98f 	bl	800087c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7fe f98b 	bl	800087c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e10c      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	4b6a      	ldr	r3, [pc, #424]	@ (8002720 <HAL_RCC_OscConfig+0x474>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x2ea>
 8002588:	4b64      	ldr	r3, [pc, #400]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258c:	4a63      	ldr	r2, [pc, #396]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6713      	str	r3, [r2, #112]	@ 0x70
 8002594:	e01c      	b.n	80025d0 <HAL_RCC_OscConfig+0x324>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x30c>
 800259e:	4b5f      	ldr	r3, [pc, #380]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a2:	4a5e      	ldr	r2, [pc, #376]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025aa:	4b5c      	ldr	r3, [pc, #368]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ae:	4a5b      	ldr	r2, [pc, #364]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0x324>
 80025b8:	4b58      	ldr	r3, [pc, #352]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025bc:	4a57      	ldr	r2, [pc, #348]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c4:	4b55      	ldr	r3, [pc, #340]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c8:	4a54      	ldr	r2, [pc, #336]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025ca:	f023 0304 	bic.w	r3, r3, #4
 80025ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d015      	beq.n	8002604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe f950 	bl	800087c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe f94c 	bl	800087c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0cb      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	4b49      	ldr	r3, [pc, #292]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ee      	beq.n	80025e0 <HAL_RCC_OscConfig+0x334>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002604:	f7fe f93a 	bl	800087c <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe f936 	bl	800087c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e0b5      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002622:	4b3e      	ldr	r3, [pc, #248]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ee      	bne.n	800260c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b39      	ldr	r3, [pc, #228]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	4a38      	ldr	r2, [pc, #224]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a1 	beq.w	800278c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800264a:	4b34      	ldr	r3, [pc, #208]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d05c      	beq.n	8002710 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d141      	bne.n	80026e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b31      	ldr	r3, [pc, #196]	@ (8002724 <HAL_RCC_OscConfig+0x478>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe f90a 	bl	800087c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe f906 	bl	800087c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e087      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	4b27      	ldr	r3, [pc, #156]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	019b      	lsls	r3, r3, #6
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	3b01      	subs	r3, #1
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	491b      	ldr	r1, [pc, #108]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_RCC_OscConfig+0x478>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7fe f8df 	bl	800087c <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe f8db 	bl	800087c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e05c      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x416>
 80026e0:	e054      	b.n	800278c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_RCC_OscConfig+0x478>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe f8c8 	bl	800087c <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe f8c4 	bl	800087c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e045      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCC_OscConfig+0x470>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x444>
 800270e:	e03d      	b.n	800278c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d107      	bne.n	8002728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e038      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
 800271c:	40023800 	.word	0x40023800
 8002720:	40007000 	.word	0x40007000
 8002724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCC_OscConfig+0x4ec>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d028      	beq.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d121      	bne.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d11a      	bne.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800275e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002760:	4293      	cmp	r3, r2
 8002762:	d111      	bne.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	3b01      	subs	r3, #1
 8002772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d107      	bne.n	8002788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800

0800279c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0cc      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b0:	4b68      	ldr	r3, [pc, #416]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d90c      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b65      	ldr	r3, [pc, #404]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b63      	ldr	r3, [pc, #396]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b8      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f0:	4b59      	ldr	r3, [pc, #356]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a58      	ldr	r2, [pc, #352]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002808:	4b53      	ldr	r3, [pc, #332]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a52      	ldr	r2, [pc, #328]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b50      	ldr	r3, [pc, #320]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	494d      	ldr	r1, [pc, #308]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d044      	beq.n	80028bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b47      	ldr	r3, [pc, #284]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d119      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e07f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d003      	beq.n	800285a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002856:	2b03      	cmp	r3, #3
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	4b3f      	ldr	r3, [pc, #252]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	4b3b      	ldr	r3, [pc, #236]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e067      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287a:	4b37      	ldr	r3, [pc, #220]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 0203 	bic.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4934      	ldr	r1, [pc, #208]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800288c:	f7fd fff6 	bl	800087c <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	e00a      	b.n	80028aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002894:	f7fd fff2 	bl	800087c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e04f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 020c 	and.w	r2, r3, #12
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d1eb      	bne.n	8002894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028bc:	4b25      	ldr	r3, [pc, #148]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d20c      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <HAL_RCC_ClockConfig+0x1b8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e032      	b.n	800294a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4916      	ldr	r1, [pc, #88]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290e:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	490e      	ldr	r1, [pc, #56]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002922:	f000 f821 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490a      	ldr	r1, [pc, #40]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	fa22 f303 	lsr.w	r3, r2, r3
 800293a:	4a09      	ldr	r2, [pc, #36]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800293e:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <HAL_RCC_ClockConfig+0x1c8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd ff56 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023c00 	.word	0x40023c00
 8002958:	40023800 	.word	0x40023800
 800295c:	0800636c 	.word	0x0800636c
 8002960:	20000000 	.word	0x20000000
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b090      	sub	sp, #64	@ 0x40
 800296e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002980:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b08      	cmp	r3, #8
 800298a:	d00d      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x40>
 800298c:	2b08      	cmp	r3, #8
 800298e:	f200 80a1 	bhi.w	8002ad4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x34>
 8002996:	2b04      	cmp	r3, #4
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800299a:	e09b      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x184>)
 800299e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a0:	e09b      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029a2:	4b53      	ldr	r3, [pc, #332]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a6:	e098      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029b2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d028      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029be:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	2200      	movs	r2, #0
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029d0:	2100      	movs	r1, #0
 80029d2:	4b47      	ldr	r3, [pc, #284]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80029d4:	fb03 f201 	mul.w	r2, r3, r1
 80029d8:	2300      	movs	r3, #0
 80029da:	fb00 f303 	mul.w	r3, r0, r3
 80029de:	4413      	add	r3, r2
 80029e0:	4a43      	ldr	r2, [pc, #268]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80029e2:	fba0 1202 	umull	r1, r2, r0, r2
 80029e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029e8:	460a      	mov	r2, r1
 80029ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ee:	4413      	add	r3, r2
 80029f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f4:	2200      	movs	r2, #0
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	61fa      	str	r2, [r7, #28]
 80029fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a02:	f7fd fbe9 	bl	80001d8 <__aeabi_uldivmod>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a0e:	e053      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a10:	4b35      	ldr	r3, [pc, #212]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	2200      	movs	r2, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	617a      	str	r2, [r7, #20]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a22:	f04f 0b00 	mov.w	fp, #0
 8002a26:	4652      	mov	r2, sl
 8002a28:	465b      	mov	r3, fp
 8002a2a:	f04f 0000 	mov.w	r0, #0
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	0159      	lsls	r1, r3, #5
 8002a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a38:	0150      	lsls	r0, r2, #5
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a42:	eb63 090b 	sbc.w	r9, r3, fp
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a5a:	ebb2 0408 	subs.w	r4, r2, r8
 8002a5e:	eb63 0509 	sbc.w	r5, r3, r9
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	00eb      	lsls	r3, r5, #3
 8002a6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a70:	00e2      	lsls	r2, r4, #3
 8002a72:	4614      	mov	r4, r2
 8002a74:	461d      	mov	r5, r3
 8002a76:	eb14 030a 	adds.w	r3, r4, sl
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	eb45 030b 	adc.w	r3, r5, fp
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a8e:	4629      	mov	r1, r5
 8002a90:	028b      	lsls	r3, r1, #10
 8002a92:	4621      	mov	r1, r4
 8002a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a98:	4621      	mov	r1, r4
 8002a9a:	028a      	lsls	r2, r1, #10
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	60fa      	str	r2, [r7, #12]
 8002aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aac:	f7fd fb94 	bl	80001d8 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ad2:	e002      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x184>)
 8002ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3740      	adds	r7, #64	@ 0x40
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	017d7840 	.word	0x017d7840

08002af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b03      	ldr	r3, [pc, #12]	@ (8002b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000

08002b0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	f107 001c 	add.w	r0, r7, #28
 8002b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d123      	bne.n	8002b6e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f001 fae8 	bl	8004138 <USB_CoreReset>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e01b      	b.n	8002ba6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f001 fadc 	bl	8004138 <USB_CoreReset>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d106      	bne.n	8002b9a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b98:	e005      	b.n	8002ba6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ba6:	7fbb      	ldrb	r3, [r7, #30]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10b      	bne.n	8002bc4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f043 0206 	orr.w	r2, r3, #6
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bd0:	b004      	add	sp, #16
 8002bd2:	4770      	bx	lr

08002bd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d165      	bne.n	8002cb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4a41      	ldr	r2, [pc, #260]	@ (8002cf0 <USB_SetTurnaroundTime+0x11c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d906      	bls.n	8002bfe <USB_SetTurnaroundTime+0x2a>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4a40      	ldr	r2, [pc, #256]	@ (8002cf4 <USB_SetTurnaroundTime+0x120>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d202      	bcs.n	8002bfe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	e062      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf4 <USB_SetTurnaroundTime+0x120>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d306      	bcc.n	8002c14 <USB_SetTurnaroundTime+0x40>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4a3b      	ldr	r2, [pc, #236]	@ (8002cf8 <USB_SetTurnaroundTime+0x124>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d202      	bcs.n	8002c14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c0e:	230e      	movs	r3, #14
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e057      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4a38      	ldr	r2, [pc, #224]	@ (8002cf8 <USB_SetTurnaroundTime+0x124>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d306      	bcc.n	8002c2a <USB_SetTurnaroundTime+0x56>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4a37      	ldr	r2, [pc, #220]	@ (8002cfc <USB_SetTurnaroundTime+0x128>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d202      	bcs.n	8002c2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c24:	230d      	movs	r3, #13
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e04c      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	4a33      	ldr	r2, [pc, #204]	@ (8002cfc <USB_SetTurnaroundTime+0x128>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d306      	bcc.n	8002c40 <USB_SetTurnaroundTime+0x6c>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4a32      	ldr	r2, [pc, #200]	@ (8002d00 <USB_SetTurnaroundTime+0x12c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d802      	bhi.n	8002c40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e041      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4a2f      	ldr	r2, [pc, #188]	@ (8002d00 <USB_SetTurnaroundTime+0x12c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d906      	bls.n	8002c56 <USB_SetTurnaroundTime+0x82>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8002d04 <USB_SetTurnaroundTime+0x130>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d802      	bhi.n	8002c56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c50:	230b      	movs	r3, #11
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e036      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4a2a      	ldr	r2, [pc, #168]	@ (8002d04 <USB_SetTurnaroundTime+0x130>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d906      	bls.n	8002c6c <USB_SetTurnaroundTime+0x98>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4a29      	ldr	r2, [pc, #164]	@ (8002d08 <USB_SetTurnaroundTime+0x134>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d802      	bhi.n	8002c6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c66:	230a      	movs	r3, #10
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e02b      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4a26      	ldr	r2, [pc, #152]	@ (8002d08 <USB_SetTurnaroundTime+0x134>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d906      	bls.n	8002c82 <USB_SetTurnaroundTime+0xae>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4a25      	ldr	r2, [pc, #148]	@ (8002d0c <USB_SetTurnaroundTime+0x138>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d202      	bcs.n	8002c82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c7c:	2309      	movs	r3, #9
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e020      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a21      	ldr	r2, [pc, #132]	@ (8002d0c <USB_SetTurnaroundTime+0x138>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d306      	bcc.n	8002c98 <USB_SetTurnaroundTime+0xc4>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	@ (8002d10 <USB_SetTurnaroundTime+0x13c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d802      	bhi.n	8002c98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c92:	2308      	movs	r3, #8
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e015      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d10 <USB_SetTurnaroundTime+0x13c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d906      	bls.n	8002cae <USB_SetTurnaroundTime+0xda>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d14 <USB_SetTurnaroundTime+0x140>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d202      	bcs.n	8002cae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ca8:	2307      	movs	r3, #7
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e00a      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cae:	2306      	movs	r3, #6
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e007      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002cba:	2309      	movs	r3, #9
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e001      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002cc0:	2309      	movs	r3, #9
 8002cc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	00d8acbf 	.word	0x00d8acbf
 8002cf4:	00e4e1c0 	.word	0x00e4e1c0
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	01067380 	.word	0x01067380
 8002d00:	011a499f 	.word	0x011a499f
 8002d04:	01312cff 	.word	0x01312cff
 8002d08:	014ca43f 	.word	0x014ca43f
 8002d0c:	016e3600 	.word	0x016e3600
 8002d10:	01a6ab1f 	.word	0x01a6ab1f
 8002d14:	01e84800 	.word	0x01e84800

08002d18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d115      	bne.n	8002daa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002d8a:	200a      	movs	r0, #10
 8002d8c:	f7fd fd82 	bl	8000894 <HAL_Delay>
      ms += 10U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	330a      	adds	r3, #10
 8002d94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f001 f93f 	bl	800401a <USB_GetMode>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d01e      	beq.n	8002de0 <USB_SetCurrentMode+0x84>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2bc7      	cmp	r3, #199	@ 0xc7
 8002da6:	d9f0      	bls.n	8002d8a <USB_SetCurrentMode+0x2e>
 8002da8:	e01a      	b.n	8002de0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d115      	bne.n	8002ddc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002dbc:	200a      	movs	r0, #10
 8002dbe:	f7fd fd69 	bl	8000894 <HAL_Delay>
      ms += 10U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	330a      	adds	r3, #10
 8002dc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f001 f926 	bl	800401a <USB_GetMode>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <USB_SetCurrentMode+0x84>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2bc7      	cmp	r3, #199	@ 0xc7
 8002dd8:	d9f0      	bls.n	8002dbc <USB_SetCurrentMode+0x60>
 8002dda:	e001      	b.n	8002de0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e005      	b.n	8002dec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2bc8      	cmp	r3, #200	@ 0xc8
 8002de4:	d101      	bne.n	8002dea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002df4:	b084      	sub	sp, #16
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	e009      	b.n	8002e28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	3340      	adds	r3, #64	@ 0x40
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	3301      	adds	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b0e      	cmp	r3, #14
 8002e2c:	d9f2      	bls.n	8002e14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d11c      	bne.n	8002e70 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e6e:	e00b      	b.n	8002e88 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2300      	movs	r3, #0
 8002e92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10d      	bne.n	8002eb8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f968 	bl	800317c <USB_SetDevSpeed>
 8002eac:	e008      	b.n	8002ec0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002eae:	2101      	movs	r1, #1
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f963 	bl	800317c <USB_SetDevSpeed>
 8002eb6:	e003      	b.n	8002ec0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002eb8:	2103      	movs	r1, #3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f95e 	bl	800317c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8fa 	bl	80030bc <USB_FlushTxFifo>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f924 	bl	8003120 <USB_FlushRxFifo>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2300      	movs	r3, #0
 8002eec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f00:	461a      	mov	r2, r3
 8002f02:	2300      	movs	r3, #0
 8002f04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	e043      	b.n	8002f94 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f22:	d118      	bne.n	8002f56 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f36:	461a      	mov	r2, r3
 8002f38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e013      	b.n	8002f68 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	e008      	b.n	8002f68 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f62:	461a      	mov	r2, r3
 8002f64:	2300      	movs	r3, #0
 8002f66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f74:	461a      	mov	r2, r3
 8002f76:	2300      	movs	r3, #0
 8002f78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3301      	adds	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f98:	461a      	mov	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d3b5      	bcc.n	8002f0c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	e043      	b.n	800302e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fbc:	d118      	bne.n	8002ff0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e013      	b.n	8003002 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e008      	b.n	8003002 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2300      	movs	r3, #0
 8003000:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800300e:	461a      	mov	r2, r3
 8003010:	2300      	movs	r3, #0
 8003012:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003020:	461a      	mov	r2, r3
 8003022:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003026:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	3301      	adds	r3, #1
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003032:	461a      	mov	r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4293      	cmp	r3, r2
 8003038:	d3b5      	bcc.n	8002fa6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800304c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800305a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800305c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f043 0210 	orr.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <USB_DevInit+0x2c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800307c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f043 0208 	orr.w	r2, r3, #8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003090:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030b4:	b004      	add	sp, #16
 80030b6:	4770      	bx	lr
 80030b8:	803c3800 	.word	0x803c3800

080030bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3301      	adds	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030d6:	d901      	bls.n	80030dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e01b      	b.n	8003114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	daf2      	bge.n	80030ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	019b      	lsls	r3, r3, #6
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003100:	d901      	bls.n	8003106 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e006      	b.n	8003114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b20      	cmp	r3, #32
 8003110:	d0f0      	beq.n	80030f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003138:	d901      	bls.n	800313e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e018      	b.n	8003170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	daf2      	bge.n	800312c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2210      	movs	r2, #16
 800314e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3301      	adds	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800315c:	d901      	bls.n	8003162 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e006      	b.n	8003170 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b10      	cmp	r3, #16
 800316c:	d0f0      	beq.n	8003150 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	68f9      	ldr	r1, [r7, #12]
 8003198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b087      	sub	sp, #28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0306 	and.w	r3, r3, #6
 80031c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]
 80031d2:	e00a      	b.n	80031ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d002      	beq.n	80031e0 <USB_GetDevSpeed+0x32>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b06      	cmp	r3, #6
 80031de:	d102      	bne.n	80031e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80031e0:	2302      	movs	r3, #2
 80031e2:	75fb      	strb	r3, [r7, #23]
 80031e4:	e001      	b.n	80031ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80031e6:	230f      	movs	r3, #15
 80031e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	785b      	ldrb	r3, [r3, #1]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d13a      	bne.n	800328a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800321a:	69da      	ldr	r2, [r3, #28]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	b29b      	uxth	r3, r3
 800322c:	68f9      	ldr	r1, [r7, #12]
 800322e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003232:	4313      	orrs	r3, r2
 8003234:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d155      	bne.n	80032f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	791b      	ldrb	r3, [r3, #4]
 8003266:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003268:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	059b      	lsls	r3, r3, #22
 800326e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003270:	4313      	orrs	r3, r2
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	0151      	lsls	r1, r2, #5
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	440a      	add	r2, r1
 800327a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e036      	b.n	80032f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	2101      	movs	r1, #1
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	68f9      	ldr	r1, [r7, #12]
 80032a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11a      	bne.n	80032f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	791b      	ldrb	r3, [r3, #4]
 80032dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032de:	430b      	orrs	r3, r1
 80032e0:	4313      	orrs	r3, r2
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	0151      	lsls	r1, r2, #5
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	440a      	add	r2, r1
 80032ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d161      	bne.n	80033e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003336:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800333a:	d11f      	bne.n	800337c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	0151      	lsls	r1, r2, #5
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	440a      	add	r2, r1
 8003352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003356:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800335a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	0151      	lsls	r1, r2, #5
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	440a      	add	r2, r1
 8003372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003376:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800337a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	b29b      	uxth	r3, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	68f9      	ldr	r1, [r7, #12]
 8003398:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800339c:	4013      	ands	r3, r2
 800339e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033c0:	4013      	ands	r3, r2
 80033c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	0159      	lsls	r1, r3, #5
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	440b      	add	r3, r1
 80033da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033de:	4619      	mov	r1, r3
 80033e0:	4b35      	ldr	r3, [pc, #212]	@ (80034b8 <USB_DeactivateEndpoint+0x1b0>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
 80033e6:	e060      	b.n	80034aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033fe:	d11f      	bne.n	8003440 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	440a      	add	r2, r1
 8003416:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800341a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800341e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	440a      	add	r2, r1
 8003436:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800343a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800343e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003446:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	43db      	mvns	r3, r3
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003460:	4013      	ands	r3, r2
 8003462:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	43db      	mvns	r3, r3
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003484:	4013      	ands	r3, r2
 8003486:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0159      	lsls	r1, r3, #5
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	440b      	add	r3, r1
 800349e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a2:	4619      	mov	r1, r3
 80034a4:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <USB_DeactivateEndpoint+0x1b4>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	ec337800 	.word	0xec337800
 80034bc:	eff37800 	.word	0xeff37800

080034c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	@ 0x28
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	4613      	mov	r3, r2
 80034cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	785b      	ldrb	r3, [r3, #1]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	f040 817f 	bne.w	80037e0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d132      	bne.n	8003550 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	0151      	lsls	r1, r2, #5
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	440a      	add	r2, r1
 8003500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003504:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003508:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800350c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	0151      	lsls	r1, r2, #5
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	440a      	add	r2, r1
 8003524:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003528:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800352c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	440a      	add	r2, r1
 8003544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003548:	0cdb      	lsrs	r3, r3, #19
 800354a:	04db      	lsls	r3, r3, #19
 800354c:	6113      	str	r3, [r2, #16]
 800354e:	e097      	b.n	8003680 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	0151      	lsls	r1, r2, #5
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	440a      	add	r2, r1
 8003566:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800356a:	0cdb      	lsrs	r3, r3, #19
 800356c:	04db      	lsls	r3, r3, #19
 800356e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	0151      	lsls	r1, r2, #5
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	440a      	add	r2, r1
 8003586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800358a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800358e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003592:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11a      	bne.n	80035d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d903      	bls.n	80035ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035cc:	6113      	str	r3, [r2, #16]
 80035ce:	e044      	b.n	800365a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4413      	add	r3, r2
 80035da:	1e5a      	subs	r2, r3, #1
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	8afb      	ldrh	r3, [r7, #22]
 80035f6:	04d9      	lsls	r1, r3, #19
 80035f8:	4ba4      	ldr	r3, [pc, #656]	@ (800388c <USB_EPStartXfer+0x3cc>)
 80035fa:	400b      	ands	r3, r1
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	0148      	lsls	r0, r1, #5
 8003600:	69f9      	ldr	r1, [r7, #28]
 8003602:	4401      	add	r1, r0
 8003604:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003608:	4313      	orrs	r3, r2
 800360a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	791b      	ldrb	r3, [r3, #4]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d122      	bne.n	800365a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	440a      	add	r2, r1
 800362a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800362e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003632:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	8afb      	ldrh	r3, [r7, #22]
 8003644:	075b      	lsls	r3, r3, #29
 8003646:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800364a:	69b9      	ldr	r1, [r7, #24]
 800364c:	0148      	lsls	r0, r1, #5
 800364e:	69f9      	ldr	r1, [r7, #28]
 8003650:	4401      	add	r1, r0
 8003652:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003656:	4313      	orrs	r3, r2
 8003658:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003670:	69b9      	ldr	r1, [r7, #24]
 8003672:	0148      	lsls	r0, r1, #5
 8003674:	69f9      	ldr	r1, [r7, #28]
 8003676:	4401      	add	r1, r0
 8003678:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800367c:	4313      	orrs	r3, r2
 800367e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d14b      	bne.n	800371e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	791b      	ldrb	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d128      	bne.n	80036fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d110      	bne.n	80036dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	0151      	lsls	r1, r2, #5
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	440a      	add	r2, r1
 80036d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00f      	b.n	80036fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	0151      	lsls	r1, r2, #5
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	440a      	add	r2, r1
 80036f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	0151      	lsls	r1, r2, #5
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	440a      	add	r2, r1
 8003712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003716:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	e166      	b.n	80039ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	0151      	lsls	r1, r2, #5
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	440a      	add	r2, r1
 8003734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003738:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800373c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	791b      	ldrb	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d015      	beq.n	8003772 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 814e 	beq.w	80039ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	69f9      	ldr	r1, [r7, #28]
 8003768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800376c:	4313      	orrs	r3, r2
 800376e:	634b      	str	r3, [r1, #52]	@ 0x34
 8003770:	e13c      	b.n	80039ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d110      	bne.n	80037a4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	0151      	lsls	r1, r2, #5
 8003794:	69fa      	ldr	r2, [r7, #28]
 8003796:	440a      	add	r2, r1
 8003798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800379c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e00f      	b.n	80037c4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	0151      	lsls	r1, r2, #5
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	440a      	add	r2, r1
 80037ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	68d9      	ldr	r1, [r3, #12]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781a      	ldrb	r2, [r3, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	b298      	uxth	r0, r3
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	4603      	mov	r3, r0
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f9b9 	bl	8003b50 <USB_WritePacket>
 80037de:	e105      	b.n	80039ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	0151      	lsls	r1, r2, #5
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	440a      	add	r2, r1
 80037f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037fa:	0cdb      	lsrs	r3, r3, #19
 80037fc:	04db      	lsls	r3, r3, #19
 80037fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	440a      	add	r2, r1
 8003816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800381a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800381e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003822:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d132      	bne.n	8003890 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003858:	69b9      	ldr	r1, [r7, #24]
 800385a:	0148      	lsls	r0, r1, #5
 800385c:	69f9      	ldr	r1, [r7, #28]
 800385e:	4401      	add	r1, r0
 8003860:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	0151      	lsls	r1, r2, #5
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	440a      	add	r2, r1
 800387e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003882:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003886:	6113      	str	r3, [r2, #16]
 8003888:	e062      	b.n	8003950 <USB_EPStartXfer+0x490>
 800388a:	bf00      	nop
 800388c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d123      	bne.n	80038e0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ae:	69b9      	ldr	r1, [r7, #24]
 80038b0:	0148      	lsls	r0, r1, #5
 80038b2:	69f9      	ldr	r1, [r7, #28]
 80038b4:	4401      	add	r1, r0
 80038b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80038ba:	4313      	orrs	r3, r2
 80038bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	0151      	lsls	r1, r2, #5
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	440a      	add	r2, r1
 80038d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038dc:	6113      	str	r3, [r2, #16]
 80038de:	e037      	b.n	8003950 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4413      	add	r3, r2
 80038ea:	1e5a      	subs	r2, r3, #1
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	8afa      	ldrh	r2, [r7, #22]
 80038fc:	fb03 f202 	mul.w	r2, r3, r2
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	8afb      	ldrh	r3, [r7, #22]
 8003914:	04d9      	lsls	r1, r3, #19
 8003916:	4b38      	ldr	r3, [pc, #224]	@ (80039f8 <USB_EPStartXfer+0x538>)
 8003918:	400b      	ands	r3, r1
 800391a:	69b9      	ldr	r1, [r7, #24]
 800391c:	0148      	lsls	r0, r1, #5
 800391e:	69f9      	ldr	r1, [r7, #28]
 8003920:	4401      	add	r1, r0
 8003922:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003940:	69b9      	ldr	r1, [r7, #24]
 8003942:	0148      	lsls	r0, r1, #5
 8003944:	69f9      	ldr	r1, [r7, #28]
 8003946:	4401      	add	r1, r0
 8003948:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800394c:	4313      	orrs	r3, r2
 800394e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d10d      	bne.n	8003972 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	68d9      	ldr	r1, [r3, #12]
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396e:	460a      	mov	r2, r1
 8003970:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	791b      	ldrb	r3, [r3, #4]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d128      	bne.n	80039cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d110      	bne.n	80039ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e00f      	b.n	80039cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	0151      	lsls	r1, r2, #5
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	440a      	add	r2, r1
 80039c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	0151      	lsls	r1, r2, #5
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	440a      	add	r2, r1
 80039e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80039ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	1ff80000 	.word	0x1ff80000

080039fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d14a      	bne.n	8003ab0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a32:	f040 8086 	bne.w	8003b42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	7812      	ldrb	r2, [r2, #0]
 8003a4a:	0151      	lsls	r1, r2, #5
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	440a      	add	r2, r1
 8003a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	0151      	lsls	r1, r2, #5
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	440a      	add	r2, r1
 8003a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d902      	bls.n	8003a94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
          break;
 8003a92:	e056      	b.n	8003b42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aac:	d0e7      	beq.n	8003a7e <USB_EPStopXfer+0x82>
 8003aae:	e048      	b.n	8003b42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ac8:	d13b      	bne.n	8003b42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ae8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003aec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	7812      	ldrb	r2, [r2, #0]
 8003b02:	0151      	lsls	r1, r2, #5
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	440a      	add	r2, r1
 8003b08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3301      	adds	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d902      	bls.n	8003b28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
          break;
 8003b26:	e00c      	b.n	8003b42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b40:	d0e7      	beq.n	8003b12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	@ 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	460b      	mov	r3, r1
 8003b60:	71fb      	strb	r3, [r7, #7]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d123      	bne.n	8003bbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b76:	88bb      	ldrh	r3, [r7, #4]
 8003b78:	3303      	adds	r3, #3
 8003b7a:	089b      	lsrs	r3, r3, #2
 8003b7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e018      	b.n	8003bb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	031a      	lsls	r2, r3, #12
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b90:	461a      	mov	r2, r3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d3e2      	bcc.n	8003b84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3724      	adds	r7, #36	@ 0x24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b08b      	sub	sp, #44	@ 0x2c
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	623b      	str	r3, [r7, #32]
 8003bf6:	e014      	b.n	8003c22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	3301      	adds	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	3301      	adds	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	6a3a      	ldr	r2, [r7, #32]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d3e6      	bcc.n	8003bf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003c2a:	8bfb      	ldrh	r3, [r7, #30]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01e      	beq.n	8003c6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f107 0310 	add.w	r3, r7, #16
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c54:	701a      	strb	r2, [r3, #0]
      i++;
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	3301      	adds	r3, #1
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003c62:	8bfb      	ldrh	r3, [r7, #30]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003c68:	8bfb      	ldrh	r3, [r7, #30]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ea      	bne.n	8003c44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	372c      	adds	r7, #44	@ 0x2c
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d12c      	bne.n	8003cf2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db12      	blt.n	8003cd0 <USB_EPSetStall+0x54>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00f      	beq.n	8003cd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	e02b      	b.n	8003d4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	db12      	blt.n	8003d2a <USB_EPSetStall+0xae>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00f      	beq.n	8003d2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	0151      	lsls	r1, r2, #5
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	440a      	add	r2, r1
 8003d40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d128      	bne.n	8003dc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	791b      	ldrb	r3, [r3, #4]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d003      	beq.n	8003da4 <USB_EPClearStall+0x4c>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	791b      	ldrb	r3, [r3, #4]
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d138      	bne.n	8003e16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	e027      	b.n	8003e16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003de4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	791b      	ldrb	r3, [r3, #4]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d003      	beq.n	8003df6 <USB_EPClearStall+0x9e>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	791b      	ldrb	r3, [r3, #4]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d10f      	bne.n	8003e16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e9e:	f023 0302 	bic.w	r3, r3, #2
 8003ea2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003ecc:	f023 0303 	bic.w	r3, r3, #3
 8003ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	0c1b      	lsrs	r3, r3, #16
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	b29b      	uxth	r3, r3
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	01db      	lsls	r3, r3, #7
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800400c:	68bb      	ldr	r3, [r7, #8]
}
 800400e:	4618      	mov	r0, r3
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0301 	and.w	r3, r3, #1
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004050:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004054:	f023 0307 	bic.w	r3, r3, #7
 8004058:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800406c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	460b      	mov	r3, r1
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	333c      	adds	r3, #60	@ 0x3c
 8004092:	3304      	adds	r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4a26      	ldr	r2, [pc, #152]	@ (8004134 <USB_EP0_OutStart+0xb8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d90a      	bls.n	80040b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040b0:	d101      	bne.n	80040b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e037      	b.n	8004126 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040bc:	461a      	mov	r2, r3
 80040be:	2300      	movs	r3, #0
 80040c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040e4:	f043 0318 	orr.w	r3, r3, #24
 80040e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80040fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d10f      	bne.n	8004124 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410a:	461a      	mov	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800411e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004122:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	4f54300a 	.word	0x4f54300a

08004138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004150:	d901      	bls.n	8004156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e01b      	b.n	800418e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	daf2      	bge.n	8004144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f043 0201 	orr.w	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3301      	adds	r3, #1
 8004172:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800417a:	d901      	bls.n	8004180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e006      	b.n	800418e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d0f0      	beq.n	800416e <USB_CoreReset+0x36>

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <USBD_MIDI_Init>:
/*************************************************************************************************/
#endif
/*************************************************************************************************/
/*************************************************************************************************/
uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);
    // Aloca memória para a interface MIDI antes de qualquer uso
	USBD_MIDI_HandleTypeDef *hmidi = (USBD_MIDI_HandleTypeDef *)USBD_malloc(sizeof(USBD_MIDI_HandleTypeDef));
 80041a6:	2046      	movs	r0, #70	@ 0x46
 80041a8:	f002 f83c 	bl	8006224 <USBD_static_malloc>
 80041ac:	60f8      	str	r0, [r7, #12]

    if (hmidi == NULL)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <USBD_MIDI_Init+0x1e>
	{
		return USBD_FAIL;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e01f      	b.n	80041f8 <USBD_MIDI_Init+0x5e>
	}

    /* Inicializar a estrutura com zeros */
    memset(hmidi, 0, sizeof(USBD_MIDI_HandleTypeDef));
 80041b8:	2246      	movs	r2, #70	@ 0x46
 80041ba:	2100      	movs	r1, #0
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f002 f875 	bl	80062ac <memset>

    /* Associa a classe MIDI ao dispositivo */
	pdev->pClassDataCmsit[pdev->classId] = (void *)hmidi;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	32b0      	adds	r2, #176	@ 0xb0
 80041cc:	68f9      	ldr	r1, [r7, #12]
 80041ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    // Abre os endpoints MIDI
    (void)USBD_LL_OpenEP(pdev, MIDI_IN_EP, USBD_EP_TYPE_BULK, MIDI_DATA_IN_PACKET_SIZE);
 80041d2:	2340      	movs	r3, #64	@ 0x40
 80041d4:	2202      	movs	r2, #2
 80041d6:	2181      	movs	r1, #129	@ 0x81
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f001 ff00 	bl	8005fde <USBD_LL_OpenEP>
    (void)USBD_LL_OpenEP(pdev, MIDI_OUT_EP, USBD_EP_TYPE_BULK, MIDI_DATA_OUT_PACKET_SIZE);
 80041de:	2340      	movs	r3, #64	@ 0x40
 80041e0:	2202      	movs	r2, #2
 80041e2:	2101      	movs	r1, #1
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f001 fefa 	bl	8005fde <USBD_LL_OpenEP>

    // Prepara a recepção de dados do host
    (void)USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, hmidi->buffer, MIDI_DATA_OUT_PACKET_SIZE);
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	2340      	movs	r3, #64	@ 0x40
 80041ee:	2101      	movs	r1, #1
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f001 ffe3 	bl	80061bc <USBD_LL_PrepareReceive>

    return USBD_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <USBD_MIDI_DeInit>:
/*************************************************************************************************/

/*************************************************************************************************/
uint8_t USBD_MIDI_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, MIDI_OUT_EP);
 800420c:	2101      	movs	r1, #1
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f001 ff0b 	bl	800602a <USBD_LL_CloseEP>
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 0U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
  pdev->ep_out[MIDI_OUT_EP & 0xFU].bInterval = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f8a3 217a 	strh.w	r2, [r3, #378]	@ 0x17a

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MIDI_IN_EP);
 8004224:	2181      	movs	r1, #129	@ 0x81
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f001 feff 	bl	800602a <USBD_LL_CloseEP>
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	871a      	strh	r2, [r3, #56]	@ 0x38
  pdev->ep_in[MIDI_IN_EP & 0xFU].bInterval = 0U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* DeInit physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	32b0      	adds	r2, #176	@ 0xb0
 8004242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01d      	beq.n	8004286 <USBD_MIDI_DeInit+0x86>
  {
	  memset(pdev->pClassDataCmsit[pdev->classId], 0, sizeof(USBD_MIDI_HandleTypeDef)); // Opcional
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	32b0      	adds	r2, #176	@ 0xb0
 8004254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004258:	2246      	movs	r2, #70	@ 0x46
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f002 f825 	bl	80062ac <memset>
	  (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	32b0      	adds	r2, #176	@ 0xb0
 800426c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004270:	4618      	mov	r0, r3
 8004272:	f001 ffe5 	bl	8006240 <USBD_static_free>
	  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	32b0      	adds	r2, #176	@ 0xb0
 8004280:	2100      	movs	r1, #0
 8004282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <USBD_MIDI_DataIn>:
 * @param  pdev  Ponteiro para a estrutura do dispositivo USB.
 * @param  epnum Número do endpoint de transmissão.
 * @return USBD_OK se a transmissão foi bem-sucedida, USBD_FAIL se não há dados para enviar.
 */
uint8_t USBD_MIDI_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	70fb      	strb	r3, [r7, #3]
    uint16_t USB_Tx_ptr;    // Ponteiro para a posição de leitura no buffer de transmissão
    uint16_t USB_Tx_length; // Comprimento dos dados a serem enviados

    // Se o ponteiro de leitura chegou ao final do buffer, reinicia para o início
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE) {
 800429c:	4b2e      	ldr	r3, [pc, #184]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d102      	bne.n	80042aa <USBD_MIDI_DataIn+0x1a>
        APP_Rx_ptr_out = 0;
 80042a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
    }

    // Se não há novos dados no buffer, retorna erro e define estado como pronto para novo envio
    if (APP_Rx_ptr_out == APP_Rx_ptr_in) {
 80042aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b2b      	ldr	r3, [pc, #172]	@ (800435c <USBD_MIDI_DataIn+0xcc>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d104      	bne.n	80042c0 <USBD_MIDI_DataIn+0x30>
        USB_Tx_State = USB_TX_READY;
 80042b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004360 <USBD_MIDI_DataIn+0xd0>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
        return (uint8_t)USBD_FAIL;
 80042bc:	2303      	movs	r3, #3
 80042be:	e046      	b.n	800434e <USBD_MIDI_DataIn+0xbe>
    }

    // Calcula o tamanho dos dados disponíveis no buffer
    if (APP_Rx_ptr_out > APP_Rx_ptr_in) {
 80042c0:	4b25      	ldr	r3, [pc, #148]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b25      	ldr	r3, [pc, #148]	@ (800435c <USBD_MIDI_DataIn+0xcc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d906      	bls.n	80042da <USBD_MIDI_DataIn+0x4a>
        // Caso o ponteiro de saída tenha ultrapassado o de entrada, calcula o espaço restante no buffer
        APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 80042cc:	4b22      	ldr	r3, [pc, #136]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80042d4:	4a23      	ldr	r2, [pc, #140]	@ (8004364 <USBD_MIDI_DataIn+0xd4>)
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e006      	b.n	80042e8 <USBD_MIDI_DataIn+0x58>
    } else {
        // Caso contrário, calcula o espaço entre os ponteiros
        APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 80042da:	4b20      	ldr	r3, [pc, #128]	@ (800435c <USBD_MIDI_DataIn+0xcc>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004364 <USBD_MIDI_DataIn+0xd4>)
 80042e6:	6013      	str	r3, [r2, #0]
    }

    // Define o tamanho do pacote de transmissão baseado no tamanho máximo do endpoint
    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE) {
 80042e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004364 <USBD_MIDI_DataIn+0xd4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b40      	cmp	r3, #64	@ 0x40
 80042ee:	d90f      	bls.n	8004310 <USBD_MIDI_DataIn+0x80>
        USB_Tx_ptr = APP_Rx_ptr_out;              // Define posição inicial para transmissão
 80042f0:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE; // Envia um pacote do tamanho máximo
 80042f6:	2340      	movs	r3, #64	@ 0x40
 80042f8:	81bb      	strh	r3, [r7, #12]
        APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 80042fa:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3340      	adds	r3, #64	@ 0x40
 8004300:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 8004302:	6013      	str	r3, [r2, #0]
        APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 8004304:	4b17      	ldr	r3, [pc, #92]	@ (8004364 <USBD_MIDI_DataIn+0xd4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3b40      	subs	r3, #64	@ 0x40
 800430a:	4a16      	ldr	r2, [pc, #88]	@ (8004364 <USBD_MIDI_DataIn+0xd4>)
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e00f      	b.n	8004330 <USBD_MIDI_DataIn+0xa0>
    } else {
        USB_Tx_ptr = APP_Rx_ptr_out;
 8004310:	4b11      	ldr	r3, [pc, #68]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = APP_Rx_length; // Envia o restante dos dados disponíveis
 8004316:	4b13      	ldr	r3, [pc, #76]	@ (8004364 <USBD_MIDI_DataIn+0xd4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	81bb      	strh	r3, [r7, #12]
        APP_Rx_ptr_out += APP_Rx_length;
 800431c:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <USBD_MIDI_DataIn+0xd4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4413      	add	r3, r2
 8004326:	4a0c      	ldr	r2, [pc, #48]	@ (8004358 <USBD_MIDI_DataIn+0xc8>)
 8004328:	6013      	str	r3, [r2, #0]
        APP_Rx_length = 0;
 800432a:	4b0e      	ldr	r3, [pc, #56]	@ (8004364 <USBD_MIDI_DataIn+0xd4>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
    }

    // Define estado de transmissão como ocupado e envia os dados pelo endpoint USB
    USB_Tx_State = USB_TX_BUSY;
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <USBD_MIDI_DataIn+0xd0>)
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
    USBD_LL_Transmit(pdev, epnum, &APP_Rx_Buffer[USB_Tx_ptr], USB_Tx_length);
 8004336:	89fb      	ldrh	r3, [r7, #14]
 8004338:	4a0b      	ldr	r2, [pc, #44]	@ (8004368 <USBD_MIDI_DataIn+0xd8>)
 800433a:	441a      	add	r2, r3
 800433c:	89bb      	ldrh	r3, [r7, #12]
 800433e:	78f9      	ldrb	r1, [r7, #3]
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f001 ff1a 	bl	800617a <USBD_LL_Transmit>

    // Após a transmissão bem-sucedida, redefine o estado para pronto
    USB_Tx_State = USB_TX_READY;
 8004346:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <USBD_MIDI_DataIn+0xd0>)
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]

    return (uint8_t)USBD_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000198 	.word	0x20000198
 800435c:	20000194 	.word	0x20000194
 8004360:	200001a0 	.word	0x200001a0
 8004364:	2000019c 	.word	0x2000019c
 8004368:	200001a4 	.word	0x200001a4

0800436c <USBD_MIDI_DataOut>:
/*************************************************************************************************/

/*************************************************************************************************/
uint8_t USBD_MIDI_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
    USBD_MIDI_HandleTypeDef *hmidi = (USBD_MIDI_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	32b0      	adds	r2, #176	@ 0xb0
 8004382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004386:	617b      	str	r3, [r7, #20]

    if(hmidi == NULL)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <USBD_MIDI_DataOut+0x26>
    {
        return USBD_FAIL;
 800438e:	2303      	movs	r3, #3
 8004390:	e044      	b.n	800441c <USBD_MIDI_DataOut+0xb0>
    }

    if(epnum == MIDI_OUT_EP)
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d140      	bne.n	800441a <USBD_MIDI_DataOut+0xae>
    {
        /* Obtém o tamanho do pacote recebido */
    	uint16_t PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f001 ff2e 	bl	80061fe <USBD_LL_GetRxDataSize>
 80043a2:	4603      	mov	r3, r0
 80043a4:	827b      	strh	r3, [r7, #18]

    	/* Verifica se há espaço disponível no buffer antes de copiar os dados */
		uint16_t space_available = MIDI_TOTAL_BUF_SIZE - hmidi->wr_ptr;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80043ac:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80043b0:	823b      	strh	r3, [r7, #16]

		/* Previne estouro do buffer copiando apenas o que cabe */
		uint16_t bytes_to_copy = (PacketSize > space_available) ? space_available : PacketSize;
 80043b2:	8a7a      	ldrh	r2, [r7, #18]
 80043b4:	8a3b      	ldrh	r3, [r7, #16]
 80043b6:	4293      	cmp	r3, r2
 80043b8:	bf28      	it	cs
 80043ba:	4613      	movcs	r3, r2
 80043bc:	81fb      	strh	r3, [r7, #14]

		// Chama a função específica de processamento MIDI DataOut (MIDI_DataOut_FS)
		if(MIDI_DataOut_FS(&hmidi->buffer[hmidi->wr_ptr], bytes_to_copy) == USBD_OK)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80043c4:	461a      	mov	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	4413      	add	r3, r2
 80043ca:	89fa      	ldrh	r2, [r7, #14]
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 fc37 	bl	8005c42 <MIDI_DataOut_FS>
		{

		}

		/* Atualiza o ponteiro de escrita */
		hmidi->wr_ptr += bytes_to_copy;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80043da:	89fb      	ldrh	r3, [r7, #14]
 80043dc:	4413      	add	r3, r2
 80043de:	b29a      	uxth	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

		/* Se chegou ao fim do buffer, faz wrap-around */
		if (hmidi->wr_ptr >= MIDI_TOTAL_BUF_SIZE)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80043ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80043ee:	d903      	bls.n	80043f8 <USBD_MIDI_DataOut+0x8c>
		{
			hmidi->wr_ptr = 0U;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
		}

        /* Prepara o endpoint para receber o próximo pacote MIDI */
        // Ajuste a quantidade de dados que será recebida: o que sobrou no buffer
        uint16_t remaining_space = MIDI_TOTAL_BUF_SIZE - hmidi->wr_ptr;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80043fe:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8004402:	81bb      	strh	r3, [r7, #12]

        (void)USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, &hmidi->buffer[hmidi->wr_ptr], remaining_space);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800440a:	461a      	mov	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	441a      	add	r2, r3
 8004410:	89bb      	ldrh	r3, [r7, #12]
 8004412:	2101      	movs	r1, #1
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f001 fed1 	bl	80061bc <USBD_LL_PrepareReceive>
    }

    return (uint8_t)USBD_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <USBD_MIDI_RegisterInterface>:
/*************************************************************************************************/

/*************************************************************************************************/
uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
    // Verifica se o ponteiro pdev ou fops é nulo
    if (pdev == NULL || fops == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <USBD_MIDI_RegisterInterface+0x16>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <USBD_MIDI_RegisterInterface+0x1a>
    {
        return USBD_FAIL;
 800443a:	2303      	movs	r3, #3
 800443c:	e008      	b.n	8004450 <USBD_MIDI_RegisterInterface+0x2c>
    }

    // Atribui as funções MIDI à estrutura interna
    pdev->pClassDataCmsit[pdev->classId] = (void *)fops;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	32b0      	adds	r2, #176	@ 0xb0
 8004448:	6839      	ldr	r1, [r7, #0]
 800444a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    return USBD_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <USBD_MIDI_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MIDI_GetCfgDesc(uint16_t *length)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MIDI_CfgDesc);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	22c5      	movs	r2, #197	@ 0xc5
 8004468:	801a      	strh	r2, [r3, #0]

  return USBD_MIDI_CfgDesc;
 800446a:	4b03      	ldr	r3, [pc, #12]	@ (8004478 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	20000044 	.word	0x20000044

0800447c <USBD_Init>:
  * @param  pdesc: Descriptor structure address
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004490:	2303      	movs	r3, #3
 8004492:	e01f      	b.n	80044d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	79fa      	ldrb	r2, [r7, #7]
 80044c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f001 fd21 	bl	8005f10 <USBD_LL_Init>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e025      	b.n	8004540 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	32ae      	adds	r2, #174	@ 0xae
 8004506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00f      	beq.n	8004530 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	32ae      	adds	r2, #174	@ 0xae
 800451a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	f107 020e 	add.w	r2, r7, #14
 8004524:	4610      	mov	r0, r2
 8004526:	4798      	blx	r3
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 fd29 	bl	8005fa8 <USBD_LL_Start>
 8004556:	4603      	mov	r3, r0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004568:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	4611      	mov	r1, r2
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
 80045a0:	4603      	mov	r3, r0
 80045a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	4611      	mov	r1, r2
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	4798      	blx	r3
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80045d4:	2303      	movs	r3, #3
 80045d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80045f2:	6839      	ldr	r1, [r7, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f8b8 	bl	800576a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004608:	461a      	mov	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2b02      	cmp	r3, #2
 800461c:	d01a      	beq.n	8004654 <USBD_LL_SetupStage+0x72>
 800461e:	2b02      	cmp	r3, #2
 8004620:	d822      	bhi.n	8004668 <USBD_LL_SetupStage+0x86>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <USBD_LL_SetupStage+0x4a>
 8004626:	2b01      	cmp	r3, #1
 8004628:	d00a      	beq.n	8004640 <USBD_LL_SetupStage+0x5e>
 800462a:	e01d      	b.n	8004668 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 fb0f 	bl	8004c58 <USBD_StdDevReq>
 800463a:	4603      	mov	r3, r0
 800463c:	73fb      	strb	r3, [r7, #15]
      break;
 800463e:	e020      	b.n	8004682 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fb77 	bl	8004d3c <USBD_StdItfReq>
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]
      break;
 8004652:	e016      	b.n	8004682 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fbd9 	bl	8004e14 <USBD_StdEPReq>
 8004662:	4603      	mov	r3, r0
 8004664:	73fb      	strb	r3, [r7, #15]
      break;
 8004666:	e00c      	b.n	8004682 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800466e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f001 fcf6 	bl	8006068 <USBD_LL_StallEP>
 800467c:	4603      	mov	r3, r0
 800467e:	73fb      	strb	r3, [r7, #15]
      break;
 8004680:	bf00      	nop
  }

  return ret;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	460b      	mov	r3, r1
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800469e:	7afb      	ldrb	r3, [r7, #11]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d16e      	bne.n	8004782 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80046aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	f040 8098 	bne.w	80047e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d913      	bls.n	80046ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	1ad2      	subs	r2, r2, r3
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4293      	cmp	r3, r2
 80046dc:	bf28      	it	cs
 80046de:	4613      	movcs	r3, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f001 f923 	bl	8005930 <USBD_CtlContinueRx>
 80046ea:	e07d      	b.n	80047e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d014      	beq.n	8004724 <USBD_LL_DataOutStage+0x98>
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d81d      	bhi.n	800473a <USBD_LL_DataOutStage+0xae>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <USBD_LL_DataOutStage+0x7c>
 8004702:	2b01      	cmp	r3, #1
 8004704:	d003      	beq.n	800470e <USBD_LL_DataOutStage+0x82>
 8004706:	e018      	b.n	800473a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	75bb      	strb	r3, [r7, #22]
            break;
 800470c:	e018      	b.n	8004740 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004714:	b2db      	uxtb	r3, r3
 8004716:	4619      	mov	r1, r3
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fa64 	bl	8004be6 <USBD_CoreFindIF>
 800471e:	4603      	mov	r3, r0
 8004720:	75bb      	strb	r3, [r7, #22]
            break;
 8004722:	e00d      	b.n	8004740 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4619      	mov	r1, r3
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fa66 	bl	8004c00 <USBD_CoreFindEP>
 8004734:	4603      	mov	r3, r0
 8004736:	75bb      	strb	r3, [r7, #22]
            break;
 8004738:	e002      	b.n	8004740 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	75bb      	strb	r3, [r7, #22]
            break;
 800473e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004740:	7dbb      	ldrb	r3, [r7, #22]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d119      	bne.n	800477a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b03      	cmp	r3, #3
 8004750:	d113      	bne.n	800477a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004752:	7dba      	ldrb	r2, [r7, #22]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	32ae      	adds	r2, #174	@ 0xae
 8004758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004762:	7dba      	ldrb	r2, [r7, #22]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800476a:	7dba      	ldrb	r2, [r7, #22]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	32ae      	adds	r2, #174	@ 0xae
 8004770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f001 f8e9 	bl	8005952 <USBD_CtlSendStatus>
 8004780:	e032      	b.n	80047e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004782:	7afb      	ldrb	r3, [r7, #11]
 8004784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004788:	b2db      	uxtb	r3, r3
 800478a:	4619      	mov	r1, r3
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fa37 	bl	8004c00 <USBD_CoreFindEP>
 8004792:	4603      	mov	r3, r0
 8004794:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004796:	7dbb      	ldrb	r3, [r7, #22]
 8004798:	2bff      	cmp	r3, #255	@ 0xff
 800479a:	d025      	beq.n	80047e8 <USBD_LL_DataOutStage+0x15c>
 800479c:	7dbb      	ldrb	r3, [r7, #22]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d122      	bne.n	80047e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d117      	bne.n	80047de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80047ae:	7dba      	ldrb	r2, [r7, #22]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	32ae      	adds	r2, #174	@ 0xae
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00f      	beq.n	80047de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80047be:	7dba      	ldrb	r2, [r7, #22]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80047c6:	7dba      	ldrb	r2, [r7, #22]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	32ae      	adds	r2, #174	@ 0xae
 80047cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	7afa      	ldrb	r2, [r7, #11]
 80047d4:	4611      	mov	r1, r2
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	4798      	blx	r3
 80047da:	4603      	mov	r3, r0
 80047dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	e000      	b.n	80047ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b086      	sub	sp, #24
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	460b      	mov	r3, r1
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004800:	7afb      	ldrb	r3, [r7, #11]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d16f      	bne.n	80048e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3314      	adds	r3, #20
 800480a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004812:	2b02      	cmp	r3, #2
 8004814:	d15a      	bne.n	80048cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	429a      	cmp	r2, r3
 8004820:	d914      	bls.n	800484c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	461a      	mov	r2, r3
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f001 f868 	bl	800590e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800483e:	2300      	movs	r3, #0
 8004840:	2200      	movs	r2, #0
 8004842:	2100      	movs	r1, #0
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f001 fcb9 	bl	80061bc <USBD_LL_PrepareReceive>
 800484a:	e03f      	b.n	80048cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	429a      	cmp	r2, r3
 8004856:	d11c      	bne.n	8004892 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004860:	429a      	cmp	r2, r3
 8004862:	d316      	bcc.n	8004892 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800486e:	429a      	cmp	r2, r3
 8004870:	d20f      	bcs.n	8004892 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004872:	2200      	movs	r2, #0
 8004874:	2100      	movs	r1, #0
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f001 f849 	bl	800590e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004884:	2300      	movs	r3, #0
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f001 fc96 	bl	80061bc <USBD_LL_PrepareReceive>
 8004890:	e01c      	b.n	80048cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b03      	cmp	r3, #3
 800489c:	d10f      	bne.n	80048be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80048be:	2180      	movs	r1, #128	@ 0x80
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f001 fbd1 	bl	8006068 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f001 f856 	bl	8005978 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d03a      	beq.n	800494c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff fe42 	bl	8004560 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80048e4:	e032      	b.n	800494c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80048e6:	7afb      	ldrb	r3, [r7, #11]
 80048e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f985 	bl	8004c00 <USBD_CoreFindEP>
 80048f6:	4603      	mov	r3, r0
 80048f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	2bff      	cmp	r3, #255	@ 0xff
 80048fe:	d025      	beq.n	800494c <USBD_LL_DataInStage+0x15a>
 8004900:	7dfb      	ldrb	r3, [r7, #23]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d122      	bne.n	800494c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b03      	cmp	r3, #3
 8004910:	d11c      	bne.n	800494c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004912:	7dfa      	ldrb	r2, [r7, #23]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	32ae      	adds	r2, #174	@ 0xae
 8004918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d014      	beq.n	800494c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004922:	7dfa      	ldrb	r2, [r7, #23]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800492a:	7dfa      	ldrb	r2, [r7, #23]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	32ae      	adds	r2, #174	@ 0xae
 8004930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	7afa      	ldrb	r2, [r7, #11]
 8004938:	4611      	mov	r1, r2
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	4798      	blx	r3
 800493e:	4603      	mov	r3, r0
 8004940:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004942:	7dbb      	ldrb	r3, [r7, #22]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004948:	7dbb      	ldrb	r3, [r7, #22]
 800494a:	e000      	b.n	800494e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00e      	beq.n	80049bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6852      	ldr	r2, [r2, #4]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	4611      	mov	r1, r2
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80049b8:	2303      	movs	r3, #3
 80049ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80049bc:	2340      	movs	r3, #64	@ 0x40
 80049be:	2200      	movs	r2, #0
 80049c0:	2100      	movs	r1, #0
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f001 fb0b 	bl	8005fde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2240      	movs	r2, #64	@ 0x40
 80049d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80049d8:	2340      	movs	r3, #64	@ 0x40
 80049da:	2200      	movs	r2, #0
 80049dc:	2180      	movs	r1, #128	@ 0x80
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 fafd 	bl	8005fde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2240      	movs	r2, #64	@ 0x40
 80049ee:	621a      	str	r2, [r3, #32]

  return ret;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d006      	beq.n	8004a3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d106      	bne.n	8004a74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d110      	bne.n	8004ab8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	460b      	mov	r3, r1
 8004acc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	32ae      	adds	r2, #174	@ 0xae
 8004ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e01c      	b.n	8004b1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d115      	bne.n	8004b1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	32ae      	adds	r2, #174	@ 0xae
 8004afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	32ae      	adds	r2, #174	@ 0xae
 8004b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	4611      	mov	r1, r2
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	32ae      	adds	r2, #174	@ 0xae
 8004b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e01c      	b.n	8004b82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d115      	bne.n	8004b80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	32ae      	adds	r2, #174	@ 0xae
 8004b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	32ae      	adds	r2, #174	@ 0xae
 8004b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00e      	beq.n	8004bdc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6852      	ldr	r2, [r2, #4]
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	4611      	mov	r1, r2
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004bf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004c0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004c38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	b21a      	sxth	r2, r3
 8004c40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b21b      	sxth	r3, r3
 8004c48:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004c6e:	2b40      	cmp	r3, #64	@ 0x40
 8004c70:	d005      	beq.n	8004c7e <USBD_StdDevReq+0x26>
 8004c72:	2b40      	cmp	r3, #64	@ 0x40
 8004c74:	d857      	bhi.n	8004d26 <USBD_StdDevReq+0xce>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00f      	beq.n	8004c9a <USBD_StdDevReq+0x42>
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d153      	bne.n	8004d26 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	32ae      	adds	r2, #174	@ 0xae
 8004c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	6839      	ldr	r1, [r7, #0]
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4798      	blx	r3
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
      break;
 8004c98:	e04a      	b.n	8004d30 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	2b09      	cmp	r3, #9
 8004ca0:	d83b      	bhi.n	8004d1a <USBD_StdDevReq+0xc2>
 8004ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca8 <USBD_StdDevReq+0x50>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004d11 	.word	0x08004d11
 8004cb0:	08004d1b 	.word	0x08004d1b
 8004cb4:	08004d07 	.word	0x08004d07
 8004cb8:	08004d1b 	.word	0x08004d1b
 8004cbc:	08004cdb 	.word	0x08004cdb
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004d1b 	.word	0x08004d1b
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004ce5 	.word	0x08004ce5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004cd0:	6839      	ldr	r1, [r7, #0]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa3c 	bl	8005150 <USBD_GetDescriptor>
          break;
 8004cd8:	e024      	b.n	8004d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fba1 	bl	8005424 <USBD_SetAddress>
          break;
 8004ce2:	e01f      	b.n	8004d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fbe0 	bl	80054ac <USBD_SetConfig>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
          break;
 8004cf0:	e018      	b.n	8004d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fc83 	bl	8005600 <USBD_GetConfig>
          break;
 8004cfa:	e013      	b.n	8004d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fcb4 	bl	800566c <USBD_GetStatus>
          break;
 8004d04:	e00e      	b.n	8004d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fce3 	bl	80056d4 <USBD_SetFeature>
          break;
 8004d0e:	e009      	b.n	8004d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004d10:	6839      	ldr	r1, [r7, #0]
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fd07 	bl	8005726 <USBD_ClrFeature>
          break;
 8004d18:	e004      	b.n	8004d24 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fd5e 	bl	80057de <USBD_CtlError>
          break;
 8004d22:	bf00      	nop
      }
      break;
 8004d24:	e004      	b.n	8004d30 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fd58 	bl	80057de <USBD_CtlError>
      break;
 8004d2e:	bf00      	nop
  }

  return ret;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop

08004d3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004d52:	2b40      	cmp	r3, #64	@ 0x40
 8004d54:	d005      	beq.n	8004d62 <USBD_StdItfReq+0x26>
 8004d56:	2b40      	cmp	r3, #64	@ 0x40
 8004d58:	d852      	bhi.n	8004e00 <USBD_StdItfReq+0xc4>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <USBD_StdItfReq+0x26>
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d14e      	bne.n	8004e00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d840      	bhi.n	8004df2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	889b      	ldrh	r3, [r3, #4]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d836      	bhi.n	8004de8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	889b      	ldrh	r3, [r3, #4]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ff2f 	bl	8004be6 <USBD_CoreFindIF>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d8c:	7bbb      	ldrb	r3, [r7, #14]
 8004d8e:	2bff      	cmp	r3, #255	@ 0xff
 8004d90:	d01d      	beq.n	8004dce <USBD_StdItfReq+0x92>
 8004d92:	7bbb      	ldrb	r3, [r7, #14]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11a      	bne.n	8004dce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8004d98:	7bba      	ldrb	r2, [r7, #14]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	32ae      	adds	r2, #174	@ 0xae
 8004d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00f      	beq.n	8004dc8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8004da8:	7bba      	ldrb	r2, [r7, #14]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004db0:	7bba      	ldrb	r2, [r7, #14]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	32ae      	adds	r2, #174	@ 0xae
 8004db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8004dc6:	e004      	b.n	8004dd2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8004dcc:	e001      	b.n	8004dd2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	88db      	ldrh	r3, [r3, #6]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d110      	bne.n	8004dfc <USBD_StdItfReq+0xc0>
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10d      	bne.n	8004dfc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fdb6 	bl	8005952 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004de6:	e009      	b.n	8004dfc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fcf7 	bl	80057de <USBD_CtlError>
          break;
 8004df0:	e004      	b.n	8004dfc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fcf2 	bl	80057de <USBD_CtlError>
          break;
 8004dfa:	e000      	b.n	8004dfe <USBD_StdItfReq+0xc2>
          break;
 8004dfc:	bf00      	nop
      }
      break;
 8004dfe:	e004      	b.n	8004e0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8004e00:	6839      	ldr	r1, [r7, #0]
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fceb 	bl	80057de <USBD_CtlError>
      break;
 8004e08:	bf00      	nop
  }

  return ret;
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	889b      	ldrh	r3, [r3, #4]
 8004e26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004e30:	2b40      	cmp	r3, #64	@ 0x40
 8004e32:	d007      	beq.n	8004e44 <USBD_StdEPReq+0x30>
 8004e34:	2b40      	cmp	r3, #64	@ 0x40
 8004e36:	f200 817f 	bhi.w	8005138 <USBD_StdEPReq+0x324>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02a      	beq.n	8004e94 <USBD_StdEPReq+0x80>
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	f040 817a 	bne.w	8005138 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8004e44:	7bbb      	ldrb	r3, [r7, #14]
 8004e46:	4619      	mov	r1, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff fed9 	bl	8004c00 <USBD_CoreFindEP>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004e52:	7b7b      	ldrb	r3, [r7, #13]
 8004e54:	2bff      	cmp	r3, #255	@ 0xff
 8004e56:	f000 8174 	beq.w	8005142 <USBD_StdEPReq+0x32e>
 8004e5a:	7b7b      	ldrb	r3, [r7, #13]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 8170 	bne.w	8005142 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8004e62:	7b7a      	ldrb	r2, [r7, #13]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8004e6a:	7b7a      	ldrb	r2, [r7, #13]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	32ae      	adds	r2, #174	@ 0xae
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8163 	beq.w	8005142 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8004e7c:	7b7a      	ldrb	r2, [r7, #13]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	32ae      	adds	r2, #174	@ 0xae
 8004e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e92:	e156      	b.n	8005142 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d008      	beq.n	8004eae <USBD_StdEPReq+0x9a>
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	f300 8145 	bgt.w	800512c <USBD_StdEPReq+0x318>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 809b 	beq.w	8004fde <USBD_StdEPReq+0x1ca>
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d03c      	beq.n	8004f26 <USBD_StdEPReq+0x112>
 8004eac:	e13e      	b.n	800512c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d002      	beq.n	8004ec0 <USBD_StdEPReq+0xac>
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d016      	beq.n	8004eec <USBD_StdEPReq+0xd8>
 8004ebe:	e02c      	b.n	8004f1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <USBD_StdEPReq+0xce>
 8004ec6:	7bbb      	ldrb	r3, [r7, #14]
 8004ec8:	2b80      	cmp	r3, #128	@ 0x80
 8004eca:	d00a      	beq.n	8004ee2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ecc:	7bbb      	ldrb	r3, [r7, #14]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f001 f8c9 	bl	8006068 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ed6:	2180      	movs	r1, #128	@ 0x80
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f001 f8c5 	bl	8006068 <USBD_LL_StallEP>
 8004ede:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004ee0:	e020      	b.n	8004f24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fc7a 	bl	80057de <USBD_CtlError>
              break;
 8004eea:	e01b      	b.n	8004f24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	885b      	ldrh	r3, [r3, #2]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10e      	bne.n	8004f12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004ef4:	7bbb      	ldrb	r3, [r7, #14]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <USBD_StdEPReq+0xfe>
 8004efa:	7bbb      	ldrb	r3, [r7, #14]
 8004efc:	2b80      	cmp	r3, #128	@ 0x80
 8004efe:	d008      	beq.n	8004f12 <USBD_StdEPReq+0xfe>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	88db      	ldrh	r3, [r3, #6]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d104      	bne.n	8004f12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f08:	7bbb      	ldrb	r3, [r7, #14]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f001 f8ab 	bl	8006068 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fd1d 	bl	8005952 <USBD_CtlSendStatus>

              break;
 8004f18:	e004      	b.n	8004f24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fc5e 	bl	80057de <USBD_CtlError>
              break;
 8004f22:	bf00      	nop
          }
          break;
 8004f24:	e107      	b.n	8005136 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d002      	beq.n	8004f38 <USBD_StdEPReq+0x124>
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d016      	beq.n	8004f64 <USBD_StdEPReq+0x150>
 8004f36:	e04b      	b.n	8004fd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f38:	7bbb      	ldrb	r3, [r7, #14]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00d      	beq.n	8004f5a <USBD_StdEPReq+0x146>
 8004f3e:	7bbb      	ldrb	r3, [r7, #14]
 8004f40:	2b80      	cmp	r3, #128	@ 0x80
 8004f42:	d00a      	beq.n	8004f5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f44:	7bbb      	ldrb	r3, [r7, #14]
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 f88d 	bl	8006068 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f4e:	2180      	movs	r1, #128	@ 0x80
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f001 f889 	bl	8006068 <USBD_LL_StallEP>
 8004f56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004f58:	e040      	b.n	8004fdc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fc3e 	bl	80057de <USBD_CtlError>
              break;
 8004f62:	e03b      	b.n	8004fdc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	885b      	ldrh	r3, [r3, #2]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d136      	bne.n	8004fda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f76:	7bbb      	ldrb	r3, [r7, #14]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f001 f893 	bl	80060a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fce6 	bl	8005952 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8004f86:	7bbb      	ldrb	r3, [r7, #14]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fe38 	bl	8004c00 <USBD_CoreFindEP>
 8004f90:	4603      	mov	r3, r0
 8004f92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f94:	7b7b      	ldrb	r3, [r7, #13]
 8004f96:	2bff      	cmp	r3, #255	@ 0xff
 8004f98:	d01f      	beq.n	8004fda <USBD_StdEPReq+0x1c6>
 8004f9a:	7b7b      	ldrb	r3, [r7, #13]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11c      	bne.n	8004fda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8004fa0:	7b7a      	ldrb	r2, [r7, #13]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8004fa8:	7b7a      	ldrb	r2, [r7, #13]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	32ae      	adds	r2, #174	@ 0xae
 8004fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004fb8:	7b7a      	ldrb	r2, [r7, #13]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	32ae      	adds	r2, #174	@ 0xae
 8004fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8004fce:	e004      	b.n	8004fda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fc03 	bl	80057de <USBD_CtlError>
              break;
 8004fd8:	e000      	b.n	8004fdc <USBD_StdEPReq+0x1c8>
              break;
 8004fda:	bf00      	nop
          }
          break;
 8004fdc:	e0ab      	b.n	8005136 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d002      	beq.n	8004ff0 <USBD_StdEPReq+0x1dc>
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d032      	beq.n	8005054 <USBD_StdEPReq+0x240>
 8004fee:	e097      	b.n	8005120 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ff0:	7bbb      	ldrb	r3, [r7, #14]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <USBD_StdEPReq+0x1f2>
 8004ff6:	7bbb      	ldrb	r3, [r7, #14]
 8004ff8:	2b80      	cmp	r3, #128	@ 0x80
 8004ffa:	d004      	beq.n	8005006 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fbed 	bl	80057de <USBD_CtlError>
                break;
 8005004:	e091      	b.n	800512a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800500a:	2b00      	cmp	r3, #0
 800500c:	da0b      	bge.n	8005026 <USBD_StdEPReq+0x212>
 800500e:	7bbb      	ldrb	r3, [r7, #14]
 8005010:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	3310      	adds	r3, #16
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4413      	add	r3, r2
 8005022:	3304      	adds	r3, #4
 8005024:	e00b      	b.n	800503e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005026:	7bbb      	ldrb	r3, [r7, #14]
 8005028:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2202      	movs	r2, #2
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fc43 	bl	80058d8 <USBD_CtlSendData>
              break;
 8005052:	e06a      	b.n	800512a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005058:	2b00      	cmp	r3, #0
 800505a:	da11      	bge.n	8005080 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800505c:	7bbb      	ldrb	r3, [r7, #14]
 800505e:	f003 020f 	and.w	r2, r3, #15
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3324      	adds	r3, #36	@ 0x24
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d117      	bne.n	80050a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fbb0 	bl	80057de <USBD_CtlError>
                  break;
 800507e:	e054      	b.n	800512a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	f003 020f 	and.w	r2, r3, #15
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fb9d 	bl	80057de <USBD_CtlError>
                  break;
 80050a4:	e041      	b.n	800512a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	da0b      	bge.n	80050c6 <USBD_StdEPReq+0x2b2>
 80050ae:	7bbb      	ldrb	r3, [r7, #14]
 80050b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	3310      	adds	r3, #16
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	3304      	adds	r3, #4
 80050c4:	e00b      	b.n	80050de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80050c6:	7bbb      	ldrb	r3, [r7, #14]
 80050c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4413      	add	r3, r2
 80050dc:	3304      	adds	r3, #4
 80050de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80050e0:	7bbb      	ldrb	r3, [r7, #14]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <USBD_StdEPReq+0x2d8>
 80050e6:	7bbb      	ldrb	r3, [r7, #14]
 80050e8:	2b80      	cmp	r3, #128	@ 0x80
 80050ea:	d103      	bne.n	80050f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e00e      	b.n	8005112 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80050f4:	7bbb      	ldrb	r3, [r7, #14]
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fff3 	bl	80060e4 <USBD_LL_IsStallEP>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e002      	b.n	8005112 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2202      	movs	r2, #2
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fbdd 	bl	80058d8 <USBD_CtlSendData>
              break;
 800511e:	e004      	b.n	800512a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fb5b 	bl	80057de <USBD_CtlError>
              break;
 8005128:	bf00      	nop
          }
          break;
 800512a:	e004      	b.n	8005136 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fb55 	bl	80057de <USBD_CtlError>
          break;
 8005134:	bf00      	nop
      }
      break;
 8005136:	e005      	b.n	8005144 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fb4f 	bl	80057de <USBD_CtlError>
      break;
 8005140:	e000      	b.n	8005144 <USBD_StdEPReq+0x330>
      break;
 8005142:	bf00      	nop
  }

  return ret;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	885b      	ldrh	r3, [r3, #2]
 800516a:	0a1b      	lsrs	r3, r3, #8
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	2b06      	cmp	r3, #6
 8005172:	f200 8128 	bhi.w	80053c6 <USBD_GetDescriptor+0x276>
 8005176:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <USBD_GetDescriptor+0x2c>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	08005199 	.word	0x08005199
 8005180:	080051b1 	.word	0x080051b1
 8005184:	080051f1 	.word	0x080051f1
 8005188:	080053c7 	.word	0x080053c7
 800518c:	080053c7 	.word	0x080053c7
 8005190:	08005367 	.word	0x08005367
 8005194:	08005393 	.word	0x08005393
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	7c12      	ldrb	r2, [r2, #16]
 80051a4:	f107 0108 	add.w	r1, r7, #8
 80051a8:	4610      	mov	r0, r2
 80051aa:	4798      	blx	r3
 80051ac:	60f8      	str	r0, [r7, #12]
      break;
 80051ae:	e112      	b.n	80053d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	7c1b      	ldrb	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10d      	bne.n	80051d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	f107 0208 	add.w	r2, r7, #8
 80051c4:	4610      	mov	r0, r2
 80051c6:	4798      	blx	r3
 80051c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3301      	adds	r3, #1
 80051ce:	2202      	movs	r2, #2
 80051d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80051d2:	e100      	b.n	80053d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	f107 0208 	add.w	r2, r7, #8
 80051e0:	4610      	mov	r0, r2
 80051e2:	4798      	blx	r3
 80051e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3301      	adds	r3, #1
 80051ea:	2202      	movs	r2, #2
 80051ec:	701a      	strb	r2, [r3, #0]
      break;
 80051ee:	e0f2      	b.n	80053d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	885b      	ldrh	r3, [r3, #2]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	f200 80ac 	bhi.w	8005354 <USBD_GetDescriptor+0x204>
 80051fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005204 <USBD_GetDescriptor+0xb4>)
 80051fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005202:	bf00      	nop
 8005204:	0800521d 	.word	0x0800521d
 8005208:	08005251 	.word	0x08005251
 800520c:	08005285 	.word	0x08005285
 8005210:	080052b9 	.word	0x080052b9
 8005214:	080052ed 	.word	0x080052ed
 8005218:	08005321 	.word	0x08005321
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	7c12      	ldrb	r2, [r2, #16]
 8005234:	f107 0108 	add.w	r1, r7, #8
 8005238:	4610      	mov	r0, r2
 800523a:	4798      	blx	r3
 800523c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800523e:	e091      	b.n	8005364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 facb 	bl	80057de <USBD_CtlError>
            err++;
 8005248:	7afb      	ldrb	r3, [r7, #11]
 800524a:	3301      	adds	r3, #1
 800524c:	72fb      	strb	r3, [r7, #11]
          break;
 800524e:	e089      	b.n	8005364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	7c12      	ldrb	r2, [r2, #16]
 8005268:	f107 0108 	add.w	r1, r7, #8
 800526c:	4610      	mov	r0, r2
 800526e:	4798      	blx	r3
 8005270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005272:	e077      	b.n	8005364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fab1 	bl	80057de <USBD_CtlError>
            err++;
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	3301      	adds	r3, #1
 8005280:	72fb      	strb	r3, [r7, #11]
          break;
 8005282:	e06f      	b.n	8005364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	7c12      	ldrb	r2, [r2, #16]
 800529c:	f107 0108 	add.w	r1, r7, #8
 80052a0:	4610      	mov	r0, r2
 80052a2:	4798      	blx	r3
 80052a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052a6:	e05d      	b.n	8005364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052a8:	6839      	ldr	r1, [r7, #0]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa97 	bl	80057de <USBD_CtlError>
            err++;
 80052b0:	7afb      	ldrb	r3, [r7, #11]
 80052b2:	3301      	adds	r3, #1
 80052b4:	72fb      	strb	r3, [r7, #11]
          break;
 80052b6:	e055      	b.n	8005364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	7c12      	ldrb	r2, [r2, #16]
 80052d0:	f107 0108 	add.w	r1, r7, #8
 80052d4:	4610      	mov	r0, r2
 80052d6:	4798      	blx	r3
 80052d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052da:	e043      	b.n	8005364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa7d 	bl	80057de <USBD_CtlError>
            err++;
 80052e4:	7afb      	ldrb	r3, [r7, #11]
 80052e6:	3301      	adds	r3, #1
 80052e8:	72fb      	strb	r3, [r7, #11]
          break;
 80052ea:	e03b      	b.n	8005364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	7c12      	ldrb	r2, [r2, #16]
 8005304:	f107 0108 	add.w	r1, r7, #8
 8005308:	4610      	mov	r0, r2
 800530a:	4798      	blx	r3
 800530c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800530e:	e029      	b.n	8005364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fa63 	bl	80057de <USBD_CtlError>
            err++;
 8005318:	7afb      	ldrb	r3, [r7, #11]
 800531a:	3301      	adds	r3, #1
 800531c:	72fb      	strb	r3, [r7, #11]
          break;
 800531e:	e021      	b.n	8005364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	7c12      	ldrb	r2, [r2, #16]
 8005338:	f107 0108 	add.w	r1, r7, #8
 800533c:	4610      	mov	r0, r2
 800533e:	4798      	blx	r3
 8005340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005342:	e00f      	b.n	8005364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa49 	bl	80057de <USBD_CtlError>
            err++;
 800534c:	7afb      	ldrb	r3, [r7, #11]
 800534e:	3301      	adds	r3, #1
 8005350:	72fb      	strb	r3, [r7, #11]
          break;
 8005352:	e007      	b.n	8005364 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa41 	bl	80057de <USBD_CtlError>
          err++;
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	3301      	adds	r3, #1
 8005360:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005362:	bf00      	nop
      }
      break;
 8005364:	e037      	b.n	80053d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	7c1b      	ldrb	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005376:	f107 0208 	add.w	r2, r7, #8
 800537a:	4610      	mov	r0, r2
 800537c:	4798      	blx	r3
 800537e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005380:	e029      	b.n	80053d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fa2a 	bl	80057de <USBD_CtlError>
        err++;
 800538a:	7afb      	ldrb	r3, [r7, #11]
 800538c:	3301      	adds	r3, #1
 800538e:	72fb      	strb	r3, [r7, #11]
      break;
 8005390:	e021      	b.n	80053d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7c1b      	ldrb	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10d      	bne.n	80053b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a2:	f107 0208 	add.w	r2, r7, #8
 80053a6:	4610      	mov	r0, r2
 80053a8:	4798      	blx	r3
 80053aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3301      	adds	r3, #1
 80053b0:	2207      	movs	r2, #7
 80053b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053b4:	e00f      	b.n	80053d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa10 	bl	80057de <USBD_CtlError>
        err++;
 80053be:	7afb      	ldrb	r3, [r7, #11]
 80053c0:	3301      	adds	r3, #1
 80053c2:	72fb      	strb	r3, [r7, #11]
      break;
 80053c4:	e007      	b.n	80053d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fa08 	bl	80057de <USBD_CtlError>
      err++;
 80053ce:	7afb      	ldrb	r3, [r7, #11]
 80053d0:	3301      	adds	r3, #1
 80053d2:	72fb      	strb	r3, [r7, #11]
      break;
 80053d4:	bf00      	nop
  }

  if (err != 0U)
 80053d6:	7afb      	ldrb	r3, [r7, #11]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11e      	bne.n	800541a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	88db      	ldrh	r3, [r3, #6]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d016      	beq.n	8005412 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80053e4:	893b      	ldrh	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00e      	beq.n	8005408 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	88da      	ldrh	r2, [r3, #6]
 80053ee:	893b      	ldrh	r3, [r7, #8]
 80053f0:	4293      	cmp	r3, r2
 80053f2:	bf28      	it	cs
 80053f4:	4613      	movcs	r3, r2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80053fa:	893b      	ldrh	r3, [r7, #8]
 80053fc:	461a      	mov	r2, r3
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fa69 	bl	80058d8 <USBD_CtlSendData>
 8005406:	e009      	b.n	800541c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9e7 	bl	80057de <USBD_CtlError>
 8005410:	e004      	b.n	800541c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa9d 	bl	8005952 <USBD_CtlSendStatus>
 8005418:	e000      	b.n	800541c <USBD_GetDescriptor+0x2cc>
    return;
 800541a:	bf00      	nop
  }
}
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop

08005424 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	889b      	ldrh	r3, [r3, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d131      	bne.n	800549a <USBD_SetAddress+0x76>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	88db      	ldrh	r3, [r3, #6]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d12d      	bne.n	800549a <USBD_SetAddress+0x76>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	885b      	ldrh	r3, [r3, #2]
 8005442:	2b7f      	cmp	r3, #127	@ 0x7f
 8005444:	d829      	bhi.n	800549a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	885b      	ldrh	r3, [r3, #2]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005450:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b03      	cmp	r3, #3
 800545c:	d104      	bne.n	8005468 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9bc 	bl	80057de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005466:	e01d      	b.n	80054a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7bfa      	ldrb	r2, [r7, #15]
 800546c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fe61 	bl	800613c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa69 	bl	8005952 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800548e:	e009      	b.n	80054a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005498:	e004      	b.n	80054a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800549a:	6839      	ldr	r1, [r7, #0]
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f99e 	bl	80057de <USBD_CtlError>
  }
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	885b      	ldrh	r3, [r3, #2]
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	4b4e      	ldr	r3, [pc, #312]	@ (80055fc <USBD_SetConfig+0x150>)
 80054c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80054c4:	4b4d      	ldr	r3, [pc, #308]	@ (80055fc <USBD_SetConfig+0x150>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d905      	bls.n	80054d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f985 	bl	80057de <USBD_CtlError>
    return USBD_FAIL;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e08c      	b.n	80055f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d002      	beq.n	80054ea <USBD_SetConfig+0x3e>
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d029      	beq.n	800553c <USBD_SetConfig+0x90>
 80054e8:	e075      	b.n	80055d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80054ea:	4b44      	ldr	r3, [pc, #272]	@ (80055fc <USBD_SetConfig+0x150>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d020      	beq.n	8005534 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80054f2:	4b42      	ldr	r3, [pc, #264]	@ (80055fc <USBD_SetConfig+0x150>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80054fc:	4b3f      	ldr	r3, [pc, #252]	@ (80055fc <USBD_SetConfig+0x150>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff f837 	bl	8004576 <USBD_SetClassConfig>
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f962 	bl	80057de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005522:	e065      	b.n	80055f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa14 	bl	8005952 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2203      	movs	r2, #3
 800552e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005532:	e05d      	b.n	80055f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fa0c 	bl	8005952 <USBD_CtlSendStatus>
      break;
 800553a:	e059      	b.n	80055f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800553c:	4b2f      	ldr	r3, [pc, #188]	@ (80055fc <USBD_SetConfig+0x150>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d112      	bne.n	800556a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800554c:	4b2b      	ldr	r3, [pc, #172]	@ (80055fc <USBD_SetConfig+0x150>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005556:	4b29      	ldr	r3, [pc, #164]	@ (80055fc <USBD_SetConfig+0x150>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff f826 	bl	80045ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f9f5 	bl	8005952 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005568:	e042      	b.n	80055f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800556a:	4b24      	ldr	r3, [pc, #144]	@ (80055fc <USBD_SetConfig+0x150>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	d02a      	beq.n	80055ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	4619      	mov	r1, r3
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff f814 	bl	80045ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005586:	4b1d      	ldr	r3, [pc, #116]	@ (80055fc <USBD_SetConfig+0x150>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005590:	4b1a      	ldr	r3, [pc, #104]	@ (80055fc <USBD_SetConfig+0x150>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fe ffed 	bl	8004576 <USBD_SetClassConfig>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00f      	beq.n	80055c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f918 	bl	80057de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fe fff9 	bl	80045ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80055c4:	e014      	b.n	80055f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f9c3 	bl	8005952 <USBD_CtlSendStatus>
      break;
 80055cc:	e010      	b.n	80055f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f9bf 	bl	8005952 <USBD_CtlSendStatus>
      break;
 80055d4:	e00c      	b.n	80055f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f900 	bl	80057de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80055de:	4b07      	ldr	r3, [pc, #28]	@ (80055fc <USBD_SetConfig+0x150>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fe ffe2 	bl	80045ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80055ea:	2303      	movs	r3, #3
 80055ec:	73fb      	strb	r3, [r7, #15]
      break;
 80055ee:	bf00      	nop
  }

  return ret;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	200001e4 	.word	0x200001e4

08005600 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	88db      	ldrh	r3, [r3, #6]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d004      	beq.n	800561c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f8e2 	bl	80057de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800561a:	e023      	b.n	8005664 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	dc02      	bgt.n	800562e <USBD_GetConfig+0x2e>
 8005628:	2b00      	cmp	r3, #0
 800562a:	dc03      	bgt.n	8005634 <USBD_GetConfig+0x34>
 800562c:	e015      	b.n	800565a <USBD_GetConfig+0x5a>
 800562e:	2b03      	cmp	r3, #3
 8005630:	d00b      	beq.n	800564a <USBD_GetConfig+0x4a>
 8005632:	e012      	b.n	800565a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3308      	adds	r3, #8
 800563e:	2201      	movs	r2, #1
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f948 	bl	80058d8 <USBD_CtlSendData>
        break;
 8005648:	e00c      	b.n	8005664 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	2201      	movs	r2, #1
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f940 	bl	80058d8 <USBD_CtlSendData>
        break;
 8005658:	e004      	b.n	8005664 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f8be 	bl	80057de <USBD_CtlError>
        break;
 8005662:	bf00      	nop
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800567c:	b2db      	uxtb	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	2b02      	cmp	r3, #2
 8005682:	d81e      	bhi.n	80056c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	88db      	ldrh	r3, [r3, #6]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d004      	beq.n	8005696 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8a5 	bl	80057de <USBD_CtlError>
        break;
 8005694:	e01a      	b.n	80056cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f043 0202 	orr.w	r2, r3, #2
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	330c      	adds	r3, #12
 80056b6:	2202      	movs	r2, #2
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f90c 	bl	80058d8 <USBD_CtlSendData>
      break;
 80056c0:	e004      	b.n	80056cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f88a 	bl	80057de <USBD_CtlError>
      break;
 80056ca:	bf00      	nop
  }
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	885b      	ldrh	r3, [r3, #2]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d107      	bne.n	80056f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f92f 	bl	8005952 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80056f4:	e013      	b.n	800571e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	885b      	ldrh	r3, [r3, #2]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d10b      	bne.n	8005716 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	889b      	ldrh	r3, [r3, #4]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	b29b      	uxth	r3, r3
 8005706:	b2da      	uxtb	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f91f 	bl	8005952 <USBD_CtlSendStatus>
}
 8005714:	e003      	b.n	800571e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f860 	bl	80057de <USBD_CtlError>
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005736:	b2db      	uxtb	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	2b02      	cmp	r3, #2
 800573c:	d80b      	bhi.n	8005756 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	885b      	ldrh	r3, [r3, #2]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10c      	bne.n	8005760 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f8ff 	bl	8005952 <USBD_CtlSendStatus>
      }
      break;
 8005754:	e004      	b.n	8005760 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f840 	bl	80057de <USBD_CtlError>
      break;
 800575e:	e000      	b.n	8005762 <USBD_ClrFeature+0x3c>
      break;
 8005760:	bf00      	nop
  }
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3301      	adds	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3301      	adds	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff fa40 	bl	8004c1a <SWAPBYTE>
 800579a:	4603      	mov	r3, r0
 800579c:	461a      	mov	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3301      	adds	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7ff fa33 	bl	8004c1a <SWAPBYTE>
 80057b4:	4603      	mov	r3, r0
 80057b6:	461a      	mov	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff fa26 	bl	8004c1a <SWAPBYTE>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	80da      	strh	r2, [r3, #6]
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80057e8:	2180      	movs	r1, #128	@ 0x80
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fc3c 	bl	8006068 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80057f0:	2100      	movs	r1, #0
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fc38 	bl	8006068 <USBD_LL_StallEP>
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d042      	beq.n	800589c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800581a:	6938      	ldr	r0, [r7, #16]
 800581c:	f000 f842 	bl	80058a4 <USBD_GetLen>
 8005820:	4603      	mov	r3, r0
 8005822:	3301      	adds	r3, #1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800582a:	d808      	bhi.n	800583e <USBD_GetString+0x3e>
 800582c:	6938      	ldr	r0, [r7, #16]
 800582e:	f000 f839 	bl	80058a4 <USBD_GetLen>
 8005832:	4603      	mov	r3, r0
 8005834:	3301      	adds	r3, #1
 8005836:	b29b      	uxth	r3, r3
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	e001      	b.n	8005842 <USBD_GetString+0x42>
 800583e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005846:	7dfb      	ldrb	r3, [r7, #23]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	4413      	add	r3, r2
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	7812      	ldrb	r2, [r2, #0]
 8005850:	701a      	strb	r2, [r3, #0]
  idx++;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
 8005854:	3301      	adds	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	2203      	movs	r2, #3
 8005860:	701a      	strb	r2, [r3, #0]
  idx++;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	3301      	adds	r3, #1
 8005866:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005868:	e013      	b.n	8005892 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	4413      	add	r3, r2
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	7812      	ldrb	r2, [r2, #0]
 8005874:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3301      	adds	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
    idx++;
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	3301      	adds	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005882:	7dfb      	ldrb	r3, [r7, #23]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	4413      	add	r3, r2
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
    idx++;
 800588c:	7dfb      	ldrb	r3, [r7, #23]
 800588e:	3301      	adds	r3, #1
 8005890:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e7      	bne.n	800586a <USBD_GetString+0x6a>
 800589a:	e000      	b.n	800589e <USBD_GetString+0x9e>
    return;
 800589c:	bf00      	nop
  }
}
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80058b4:	e005      	b.n	80058c2 <USBD_GetLen+0x1e>
  {
    len++;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	3301      	adds	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	3301      	adds	r3, #1
 80058c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f5      	bne.n	80058b6 <USBD_GetLen+0x12>
  }

  return len;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	2100      	movs	r1, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fc3b 	bl	800617a <USBD_LL_Transmit>

  return USBD_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	2100      	movs	r1, #0
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fc2a 	bl	800617a <USBD_LL_Transmit>

  return USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	2100      	movs	r1, #0
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fc3a 	bl	80061bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2204      	movs	r2, #4
 800595e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005962:	2300      	movs	r3, #0
 8005964:	2200      	movs	r2, #0
 8005966:	2100      	movs	r1, #0
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fc06 	bl	800617a <USBD_LL_Transmit>

  return USBD_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2205      	movs	r2, #5
 8005984:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005988:	2300      	movs	r3, #0
 800598a:	2200      	movs	r2, #0
 800598c:	2100      	movs	r1, #0
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fc14 	bl	80061bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80059a4:	2200      	movs	r2, #0
 80059a6:	4912      	ldr	r1, [pc, #72]	@ (80059f0 <MX_USB_DEVICE_Init+0x50>)
 80059a8:	4812      	ldr	r0, [pc, #72]	@ (80059f4 <MX_USB_DEVICE_Init+0x54>)
 80059aa:	f7fe fd67 	bl	800447c <USBD_Init>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80059b4:	f7fa fe58 	bl	8000668 <Error_Handler>
  }

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 80059b8:	490f      	ldr	r1, [pc, #60]	@ (80059f8 <MX_USB_DEVICE_Init+0x58>)
 80059ba:	480e      	ldr	r0, [pc, #56]	@ (80059f4 <MX_USB_DEVICE_Init+0x54>)
 80059bc:	f7fe fd8e 	bl	80044dc <USBD_RegisterClass>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80059c6:	f7fa fe4f 	bl	8000668 <Error_Handler>
  }

  if (USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_MIDI_fops_FS) != USBD_OK)
 80059ca:	490c      	ldr	r1, [pc, #48]	@ (80059fc <MX_USB_DEVICE_Init+0x5c>)
 80059cc:	4809      	ldr	r0, [pc, #36]	@ (80059f4 <MX_USB_DEVICE_Init+0x54>)
 80059ce:	f7fe fd29 	bl	8004424 <USBD_MIDI_RegisterInterface>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <MX_USB_DEVICE_Init+0x3c>
  {
      Error_Handler();
 80059d8:	f7fa fe46 	bl	8000668 <Error_Handler>
  }

  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80059dc:	4805      	ldr	r0, [pc, #20]	@ (80059f4 <MX_USB_DEVICE_Init+0x54>)
 80059de:	f7fe fdb3 	bl	8004548 <USBD_Start>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80059e8:	f7fa fe3e 	bl	8000668 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80059ec:	bf00      	nop
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	2000010c 	.word	0x2000010c
 80059f4:	200001e8 	.word	0x200001e8
 80059f8:	2000000c 	.word	0x2000000c
 80059fc:	2000015c 	.word	0x2000015c

08005a00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	6039      	str	r1, [r7, #0]
 8005a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2212      	movs	r2, #18
 8005a10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005a12:	4b03      	ldr	r3, [pc, #12]	@ (8005a20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000128 	.word	0x20000128

08005a24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	6039      	str	r1, [r7, #0]
 8005a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2204      	movs	r2, #4
 8005a34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005a36:	4b03      	ldr	r3, [pc, #12]	@ (8005a44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	2000013c 	.word	0x2000013c

08005a48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	6039      	str	r1, [r7, #0]
 8005a52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	4907      	ldr	r1, [pc, #28]	@ (8005a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8005a5e:	4808      	ldr	r0, [pc, #32]	@ (8005a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8005a60:	f7ff fece 	bl	8005800 <USBD_GetString>
 8005a64:	e004      	b.n	8005a70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	4904      	ldr	r1, [pc, #16]	@ (8005a7c <USBD_FS_ProductStrDescriptor+0x34>)
 8005a6a:	4805      	ldr	r0, [pc, #20]	@ (8005a80 <USBD_FS_ProductStrDescriptor+0x38>)
 8005a6c:	f7ff fec8 	bl	8005800 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005a70:	4b02      	ldr	r3, [pc, #8]	@ (8005a7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	200004c4 	.word	0x200004c4
 8005a80:	0800631c 	.word	0x0800631c

08005a84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	6039      	str	r1, [r7, #0]
 8005a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	4904      	ldr	r1, [pc, #16]	@ (8005aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005a94:	4804      	ldr	r0, [pc, #16]	@ (8005aa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005a96:	f7ff feb3 	bl	8005800 <USBD_GetString>
  return USBD_StrDesc;
 8005a9a:	4b02      	ldr	r3, [pc, #8]	@ (8005aa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	200004c4 	.word	0x200004c4
 8005aa8:	0800632c 	.word	0x0800632c

08005aac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	6039      	str	r1, [r7, #0]
 8005ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	221a      	movs	r2, #26
 8005abc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
//  Get_SerialNum();
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  USBD_GetString((uint8_t *)USBD_SERIAL_NUMBER_STRING, USBD_StringSerial, length);
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	4904      	ldr	r1, [pc, #16]	@ (8005ad4 <USBD_FS_SerialStrDescriptor+0x28>)
 8005ac2:	4805      	ldr	r0, [pc, #20]	@ (8005ad8 <USBD_FS_SerialStrDescriptor+0x2c>)
 8005ac4:	f7ff fe9c 	bl	8005800 <USBD_GetString>
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005ac8:	4b02      	ldr	r3, [pc, #8]	@ (8005ad4 <USBD_FS_SerialStrDescriptor+0x28>)
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000140 	.word	0x20000140
 8005ad8:	08006344 	.word	0x08006344

08005adc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	6039      	str	r1, [r7, #0]
 8005ae6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d105      	bne.n	8005afa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	4907      	ldr	r1, [pc, #28]	@ (8005b10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005af2:	4808      	ldr	r0, [pc, #32]	@ (8005b14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005af4:	f7ff fe84 	bl	8005800 <USBD_GetString>
 8005af8:	e004      	b.n	8005b04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	4904      	ldr	r1, [pc, #16]	@ (8005b10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005afe:	4805      	ldr	r0, [pc, #20]	@ (8005b14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b00:	f7ff fe7e 	bl	8005800 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b04:	4b02      	ldr	r3, [pc, #8]	@ (8005b10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	200004c4 	.word	0x200004c4
 8005b14:	08006350 	.word	0x08006350

08005b18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	6039      	str	r1, [r7, #0]
 8005b22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	4907      	ldr	r1, [pc, #28]	@ (8005b4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b2e:	4808      	ldr	r0, [pc, #32]	@ (8005b50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b30:	f7ff fe66 	bl	8005800 <USBD_GetString>
 8005b34:	e004      	b.n	8005b40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	4904      	ldr	r1, [pc, #16]	@ (8005b4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b3a:	4805      	ldr	r0, [pc, #20]	@ (8005b50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b3c:	f7ff fe60 	bl	8005800 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b40:	4b02      	ldr	r3, [pc, #8]	@ (8005b4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	200004c4 	.word	0x200004c4
 8005b50:	0800635c 	.word	0x0800635c

08005b54 <USBD_MidiMessage>:

/* Private functions ---------------------------------------------------------*/
/*************************************************************************************************/
/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void USBD_MidiMessage(uint8_t cable, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	71fb      	strb	r3, [r7, #7]
 8005b66:	4603      	mov	r3, r0
 8005b68:	71bb      	strb	r3, [r7, #6]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	717b      	strb	r3, [r7, #5]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	713b      	strb	r3, [r7, #4]
	  uint8_t txBuff[4];

	  txBuff[0] = (cable<<=4) + (byte1>>4);
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	71fb      	strb	r3, [r7, #7]
 8005b78:	79bb      	ldrb	r3, [r7, #6]
 8005b7a:	091b      	lsrs	r3, r3, #4
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	4413      	add	r3, r2
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	733b      	strb	r3, [r7, #12]
	  txBuff[1] = byte1;
 8005b86:	79bb      	ldrb	r3, [r7, #6]
 8005b88:	737b      	strb	r3, [r7, #13]
	  txBuff[2] = byte2;
 8005b8a:	797b      	ldrb	r3, [r7, #5]
 8005b8c:	73bb      	strb	r3, [r7, #14]
	  txBuff[3] = byte3;
 8005b8e:	793b      	ldrb	r3, [r7, #4]
 8005b90:	73fb      	strb	r3, [r7, #15]

	  MIDI_DataTx(txBuff, 4);
 8005b92:	f107 030c 	add.w	r3, r7, #12
 8005b96:	2104      	movs	r1, #4
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 f805 	bl	8005ba8 <MIDI_DataTx>
}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd90      	pop	{r4, r7, pc}
	...

08005ba8 <MIDI_DataTx>:
//}

/*************************************************************************************************/
//fill midi tx buffer
static uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
	uint16_t i = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	81fb      	strh	r3, [r7, #14]

	while(i < length){
 8005bb8:	e016      	b.n	8005be8 <MIDI_DataTx+0x40>

		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 8005bba:	89fb      	ldrh	r3, [r7, #14]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	441a      	add	r2, r3
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <MIDI_DataTx+0x58>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	7811      	ldrb	r1, [r2, #0]
 8005bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8005c04 <MIDI_DataTx+0x5c>)
 8005bc8:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <MIDI_DataTx+0x58>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8005c00 <MIDI_DataTx+0x58>)
 8005bd2:	6013      	str	r3, [r2, #0]

		i++;
 8005bd4:	89fb      	ldrh	r3, [r7, #14]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	81fb      	strh	r3, [r7, #14]

		if(APP_Rx_ptr_in == APP_RX_DATA_SIZE)
 8005bda:	4b09      	ldr	r3, [pc, #36]	@ (8005c00 <MIDI_DataTx+0x58>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b40      	cmp	r3, #64	@ 0x40
 8005be0:	d102      	bne.n	8005be8 <MIDI_DataTx+0x40>
		{
			APP_Rx_ptr_in = 0;
 8005be2:	4b07      	ldr	r3, [pc, #28]	@ (8005c00 <MIDI_DataTx+0x58>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
	while(i < length){
 8005be8:	89fa      	ldrh	r2, [r7, #14]
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d3e4      	bcc.n	8005bba <MIDI_DataTx+0x12>
		}
	}
	return USBD_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000194 	.word	0x20000194
 8005c04:	200001a4 	.word	0x200001a4

08005c08 <MIDI_Init_FS>:
  * @}
  */
// Definições das funções conforme o protótipo
/*************************************************************************************************/
uint8_t MIDI_Init_FS(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
    // Inicializa os endpoints e a comunicação USB
    return USBD_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <MIDI_DeInit_FS>:
/*************************************************************************************************/

/*************************************************************************************************/
uint8_t MIDI_DeInit_FS(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
    // Fecha os endpoints e desinicializa os recursos da interface MIDI
    return USBD_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <MIDI_DataIn_FS>:
/*************************************************************************************************/

/*************************************************************************************************/
uint8_t MIDI_DataIn_FS(uint8_t *data, uint16_t length)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
	UNUSED(data);
	UNUSED(length);
    // Envia dados MIDI para o host
    return USBD_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <MIDI_DataOut_FS>:
/*************************************************************************************************/

/*************************************************************************************************/
uint8_t MIDI_DataOut_FS(uint8_t *data, uint16_t length)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	807b      	strh	r3, [r7, #2]
    if (data == NULL || length == 0)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <MIDI_DataOut_FS+0x18>
 8005c54:	887b      	ldrh	r3, [r7, #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <MIDI_DataOut_FS+0x1c>
    {
        return USBD_FAIL;  // Retorna falha se não houver dados ou se o comprimento for inválido
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e000      	b.n	8005c60 <MIDI_DataOut_FS+0x1e>
//            }
//            // Adicione aqui outros tipos de mensagens MIDI conforme necessário
//        }
//    }

    return USBD_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <MIDI_Receive_FS>:
//}
/*************************************************************************************************/

/*************************************************************************************************/
uint8_t MIDI_Receive_FS(uint8_t *data, uint16_t length)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	807b      	strh	r3, [r7, #2]
	UNUSED(data);
	UNUSED(length);
    // Configura a recepção de dados MIDI de entrada
    return USBD_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <MIDI_GetState_FS>:
/*************************************************************************************************/

/*************************************************************************************************/
uint8_t MIDI_GetState_FS(void)
{
 8005c86:	b480      	push	{r7}
 8005c88:	af00      	add	r7, sp, #0
    // Retorna o estado da interface MIDI
    return USBD_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca0:	f107 0314 	add.w	r3, r7, #20
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cb8:	d13a      	bne.n	8005d30 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cba:	2300      	movs	r3, #0
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005d38 <HAL_PCD_MspInit+0xa0>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <HAL_PCD_MspInit+0xa0>)
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cca:	4b1b      	ldr	r3, [pc, #108]	@ (8005d38 <HAL_PCD_MspInit+0xa0>)
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005cd6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cdc:	2302      	movs	r3, #2
 8005cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005ce8:	230a      	movs	r3, #10
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cec:	f107 0314 	add.w	r3, r7, #20
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4812      	ldr	r0, [pc, #72]	@ (8005d3c <HAL_PCD_MspInit+0xa4>)
 8005cf4:	f7fa ff04 	bl	8000b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d38 <HAL_PCD_MspInit+0xa0>)
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfc:	4a0e      	ldr	r2, [pc, #56]	@ (8005d38 <HAL_PCD_MspInit+0xa0>)
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d02:	6353      	str	r3, [r2, #52]	@ 0x34
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <HAL_PCD_MspInit+0xa0>)
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d38 <HAL_PCD_MspInit+0xa0>)
 8005d0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d12:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d14:	4b08      	ldr	r3, [pc, #32]	@ (8005d38 <HAL_PCD_MspInit+0xa0>)
 8005d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005d20:	2200      	movs	r2, #0
 8005d22:	2100      	movs	r1, #0
 8005d24:	2043      	movs	r0, #67	@ 0x43
 8005d26:	f7fa feb4 	bl	8000a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005d2a:	2043      	movs	r0, #67	@ 0x43
 8005d2c:	f7fa fecd 	bl	8000aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005d30:	bf00      	nop
 8005d32:	3728      	adds	r7, #40	@ 0x28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	40020000 	.word	0x40020000

08005d40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fe fc43 	bl	80045e2 <USBD_LL_SetupStage>
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8005d76:	78fa      	ldrb	r2, [r7, #3]
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	f7fe fc7d 	bl	800468c <USBD_LL_DataOutStage>
}
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	3320      	adds	r3, #32
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f7fe fd16 	bl	80047f2 <USBD_LL_DataInStage>
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe fe50 	bl	8004a82 <USBD_LL_SOF>
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005df2:	2301      	movs	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	79db      	ldrb	r3, [r3, #7]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d001      	beq.n	8005e02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005dfe:	f7fa fc33 	bl	8000668 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005e08:	7bfa      	ldrb	r2, [r7, #15]
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fdf4 	bl	80049fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe fd9c 	bl	8004956 <USBD_LL_Reset>
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe fdef 	bl	8004a1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	7adb      	ldrb	r3, [r3, #11]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005e5c:	4b04      	ldr	r3, [pc, #16]	@ (8005e70 <HAL_PCD_SuspendCallback+0x48>)
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	4a03      	ldr	r2, [pc, #12]	@ (8005e70 <HAL_PCD_SuspendCallback+0x48>)
 8005e62:	f043 0306 	orr.w	r3, r3, #6
 8005e66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	e000ed00 	.word	0xe000ed00

08005e74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fde5 	bl	8004a52 <USBD_LL_Resume>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fe3d 	bl	8004b26 <USBD_LL_IsoOUTIncomplete>
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005ec6:	78fa      	ldrb	r2, [r7, #3]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe fdf9 	bl	8004ac2 <USBD_LL_IsoINIncomplete>
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe fe4f 	bl	8004b8a <USBD_LL_DevConnected>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe fe4c 	bl	8004ba0 <USBD_LL_DevDisconnected>
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d13c      	bne.n	8005f9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005f20:	4a20      	ldr	r2, [pc, #128]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005f30:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005f36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005f38:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005f3e:	4b19      	ldr	r3, [pc, #100]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f40:	2202      	movs	r2, #2
 8005f42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005f44:	4b17      	ldr	r3, [pc, #92]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005f4a:	4b16      	ldr	r3, [pc, #88]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005f50:	4b14      	ldr	r3, [pc, #80]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005f56:	4b13      	ldr	r3, [pc, #76]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005f5c:	4b11      	ldr	r3, [pc, #68]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005f62:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005f68:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005f6e:	480d      	ldr	r0, [pc, #52]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f70:	f7fa ff4a 	bl	8000e08 <HAL_PCD_Init>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005f7a:	f7fa fb75 	bl	8000668 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005f7e:	2180      	movs	r1, #128	@ 0x80
 8005f80:	4808      	ldr	r0, [pc, #32]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f82:	f7fc f976 	bl	8002272 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005f86:	2240      	movs	r2, #64	@ 0x40
 8005f88:	2100      	movs	r1, #0
 8005f8a:	4806      	ldr	r0, [pc, #24]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f8c:	f7fc f92a 	bl	80021e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005f90:	2280      	movs	r2, #128	@ 0x80
 8005f92:	2101      	movs	r1, #1
 8005f94:	4803      	ldr	r0, [pc, #12]	@ (8005fa4 <USBD_LL_Init+0x94>)
 8005f96:	f7fc f925 	bl	80021e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	200006c4 	.word	0x200006c4

08005fa8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fb f831 	bl	8001026 <HAL_PCD_Start>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f942 	bl	8006254 <USBD_Get_USB_Status>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	4608      	mov	r0, r1
 8005fe8:	4611      	mov	r1, r2
 8005fea:	461a      	mov	r2, r3
 8005fec:	4603      	mov	r3, r0
 8005fee:	70fb      	strb	r3, [r7, #3]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70bb      	strb	r3, [r7, #2]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006006:	78bb      	ldrb	r3, [r7, #2]
 8006008:	883a      	ldrh	r2, [r7, #0]
 800600a:	78f9      	ldrb	r1, [r7, #3]
 800600c:	f7fb fd05 	bl	8001a1a <HAL_PCD_EP_Open>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f91c 	bl	8006254 <USBD_Get_USB_Status>
 800601c:	4603      	mov	r3, r0
 800601e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006020:	7bbb      	ldrb	r3, [r7, #14]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006044:	78fa      	ldrb	r2, [r7, #3]
 8006046:	4611      	mov	r1, r2
 8006048:	4618      	mov	r0, r3
 800604a:	f7fb fd50 	bl	8001aee <HAL_PCD_EP_Close>
 800604e:	4603      	mov	r3, r0
 8006050:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	4618      	mov	r0, r3
 8006056:	f000 f8fd 	bl	8006254 <USBD_Get_USB_Status>
 800605a:	4603      	mov	r3, r0
 800605c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800605e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	4611      	mov	r1, r2
 8006086:	4618      	mov	r0, r3
 8006088:	f7fb fe08 	bl	8001c9c <HAL_PCD_EP_SetStall>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 f8de 	bl	8006254 <USBD_Get_USB_Status>
 8006098:	4603      	mov	r3, r0
 800609a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800609c:	7bbb      	ldrb	r3, [r7, #14]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80060c0:	78fa      	ldrb	r2, [r7, #3]
 80060c2:	4611      	mov	r1, r2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fb fe4c 	bl	8001d62 <HAL_PCD_EP_ClrStall>
 80060ca:	4603      	mov	r3, r0
 80060cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 f8bf 	bl	8006254 <USBD_Get_USB_Status>
 80060d6:	4603      	mov	r3, r0
 80060d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060da:	7bbb      	ldrb	r3, [r7, #14]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80060f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80060f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	da0b      	bge.n	8006118 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006106:	68f9      	ldr	r1, [r7, #12]
 8006108:	4613      	mov	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	3316      	adds	r3, #22
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	e00b      	b.n	8006130 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	4613      	mov	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800612e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006156:	78fa      	ldrb	r2, [r7, #3]
 8006158:	4611      	mov	r1, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f7fb fc39 	bl	80019d2 <HAL_PCD_SetAddress>
 8006160:	4603      	mov	r3, r0
 8006162:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f874 	bl	8006254 <USBD_Get_USB_Status>
 800616c:	4603      	mov	r3, r0
 800616e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006170:	7bbb      	ldrb	r3, [r7, #14]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b086      	sub	sp, #24
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
 8006186:	460b      	mov	r3, r1
 8006188:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006198:	7af9      	ldrb	r1, [r7, #11]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	f7fb fd43 	bl	8001c28 <HAL_PCD_EP_Transmit>
 80061a2:	4603      	mov	r3, r0
 80061a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f853 	bl	8006254 <USBD_Get_USB_Status>
 80061ae:	4603      	mov	r3, r0
 80061b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80061b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	460b      	mov	r3, r1
 80061ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80061da:	7af9      	ldrb	r1, [r7, #11]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	f7fb fccf 	bl	8001b82 <HAL_PCD_EP_Receive>
 80061e4:	4603      	mov	r3, r0
 80061e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 f832 	bl	8006254 <USBD_Get_USB_Status>
 80061f0:	4603      	mov	r3, r0
 80061f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80061f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006210:	78fa      	ldrb	r2, [r7, #3]
 8006212:	4611      	mov	r1, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f7fb fcef 	bl	8001bf8 <HAL_PCD_EP_GetRxCount>
 800621a:	4603      	mov	r3, r0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800622c:	4b03      	ldr	r3, [pc, #12]	@ (800623c <USBD_static_malloc+0x18>)
}
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	20000ba8 	.word	0x20000ba8

08006240 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]

}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d817      	bhi.n	8006298 <USBD_Get_USB_Status+0x44>
 8006268:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <USBD_Get_USB_Status+0x1c>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	08006281 	.word	0x08006281
 8006274:	08006287 	.word	0x08006287
 8006278:	0800628d 	.word	0x0800628d
 800627c:	08006293 	.word	0x08006293
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
    break;
 8006284:	e00b      	b.n	800629e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006286:	2303      	movs	r3, #3
 8006288:	73fb      	strb	r3, [r7, #15]
    break;
 800628a:	e008      	b.n	800629e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
    break;
 8006290:	e005      	b.n	800629e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006292:	2303      	movs	r3, #3
 8006294:	73fb      	strb	r3, [r7, #15]
    break;
 8006296:	e002      	b.n	800629e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006298:	2303      	movs	r3, #3
 800629a:	73fb      	strb	r3, [r7, #15]
    break;
 800629c:	bf00      	nop
  }
  return usb_status;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <memset>:
 80062ac:	4402      	add	r2, r0
 80062ae:	4603      	mov	r3, r0
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d100      	bne.n	80062b6 <memset+0xa>
 80062b4:	4770      	bx	lr
 80062b6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ba:	e7f9      	b.n	80062b0 <memset+0x4>

080062bc <__libc_init_array>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	4d0d      	ldr	r5, [pc, #52]	@ (80062f4 <__libc_init_array+0x38>)
 80062c0:	4c0d      	ldr	r4, [pc, #52]	@ (80062f8 <__libc_init_array+0x3c>)
 80062c2:	1b64      	subs	r4, r4, r5
 80062c4:	10a4      	asrs	r4, r4, #2
 80062c6:	2600      	movs	r6, #0
 80062c8:	42a6      	cmp	r6, r4
 80062ca:	d109      	bne.n	80062e0 <__libc_init_array+0x24>
 80062cc:	4d0b      	ldr	r5, [pc, #44]	@ (80062fc <__libc_init_array+0x40>)
 80062ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006300 <__libc_init_array+0x44>)
 80062d0:	f000 f818 	bl	8006304 <_init>
 80062d4:	1b64      	subs	r4, r4, r5
 80062d6:	10a4      	asrs	r4, r4, #2
 80062d8:	2600      	movs	r6, #0
 80062da:	42a6      	cmp	r6, r4
 80062dc:	d105      	bne.n	80062ea <__libc_init_array+0x2e>
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e4:	4798      	blx	r3
 80062e6:	3601      	adds	r6, #1
 80062e8:	e7ee      	b.n	80062c8 <__libc_init_array+0xc>
 80062ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ee:	4798      	blx	r3
 80062f0:	3601      	adds	r6, #1
 80062f2:	e7f2      	b.n	80062da <__libc_init_array+0x1e>
 80062f4:	08006384 	.word	0x08006384
 80062f8:	08006384 	.word	0x08006384
 80062fc:	08006384 	.word	0x08006384
 8006300:	08006388 	.word	0x08006388

08006304 <_init>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	bf00      	nop
 8006308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630a:	bc08      	pop	{r3}
 800630c:	469e      	mov	lr, r3
 800630e:	4770      	bx	lr

08006310 <_fini>:
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	bf00      	nop
 8006314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006316:	bc08      	pop	{r3}
 8006318:	469e      	mov	lr, r3
 800631a:	4770      	bx	lr
